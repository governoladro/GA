; OM File Header - Saved 2023/09/17 19:39:08
; (7.01 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 815 561) "" 183 0 nil "2023/08/21 18:43:38")
; End File Header
(in-package :om)(load-lib-for (quote ("GA")))(setf *om-current-persistent* (om-load-patch1 "es2ProfiliMelodici" (quote ((let ((box (om-load-boxcall (quote abstraction) "mypatch1" (om-load-patch-abs1 "valutazione profili" (quote ((let ((box (om-load-boxcall (quote genfun) "DISTANCES1" (quote distances) (quote ((om-load-inputfun (quote input-funbox) "list of pitches" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "permitted elements" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "option" "OPTION" (quote absolute) (list (list "Normal" (quote (quote normal))) (list "Octave" (quote (quote octave))) (list "Absolute" (quote (quote absolute))))) (om-load-inputfunmenu1 (quote input-funmenu) "position or not" "TYPE" (quote normal) (list (list "Normal" (quote (quote normal))) (list "Position" (quote (quote position))))))) (om-make-point 279 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list3" (quote list) (quote nil) (om-make-point 418 257) (om-make-point 17 20) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 225 259) (om-make-point 23 20) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 124 265) (om-make-point 23 20) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 297 261) (om-make-point 87 20) (list 0 1 -1 2 -2) "(0 1 -1 2 -2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCH-RANGE" (quote pitch-range) (quote ((om-load-inputfun (quote input-funbox) "list of list of notes" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "maximum pitch range" "MAX-PITCH-RANGE" 15))) (om-make-point 369 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 366 109) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 230 429) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCALE1" (quote scale1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil))) (om-make-point 171 352) nil nil nil "scale1" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONTOUR-DIRECTION" (quote contour-direction) (quote ((om-load-inputfun (quote input-funbox) "list of intervals" "DIRECT-INTERVALS" nil) (om-load-inputfun (quote input-funbox) "ratio ascending melody" "IDEAL-RATIO" 0.5))) (om-make-point 62 283) nil nil nil "contour-direction" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CLIMAX-STRENGTH" (quote climax-strength) (quote ((om-load-inputfun (quote input-funbox) "list of intervals" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "ratio" "IDEAL-RATIO" 1.0))) (om-make-point 172 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 51 174) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 134 250) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 139 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 71 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 209 311) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 36 309) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "coversione in intervalli" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (4 0 0 1 nil 0) (6 0 5 0 nil 0) (1 0 5 1 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (0 0 8 2 nil 0) (5 0 8 3 nil 0) (11 0 9 0 nil 0) (3 0 9 1 nil 0) (11 0 10 0 nil 0) (2 0 10 1 nil 0) (6 0 11 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 620 492)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 172 198) nil (list nil) "l" "valutazione profili"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 98 115) (om-make-point 17 20) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 72 115) (om-make-point 23 20) -40 "-40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch4" (om-load-patch-abs1 "esempi profili" (quote ((let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 57 332) (om-make-point 270 115) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6000 5900 5700 5600 5700 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 0 0 2621450 18350450 3 1000 nil 83/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 58 90) (om-make-point 270 115) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 7000 7100 7000 6800 6700 6900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (score-mode cursor-mode scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list 0 (quote :normal) nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 3 1000 nil 9/10 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 62 208) (om-make-point 270 115) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4400 4300 4400 4600 4700 4800 4600)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 0 0 2621450 18350450 3 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 439 115) nil nil nil "esempi profili"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 191 402) (om-make-point 270 115) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100 3900 2500 3100 4100 5800 5300 3900 2800 7000 6400 4700 7000 2800 4000 3900 2500 3100 4100 5800 5300 3900 4000 3900 2500 3100 4100 5800 5300 3900 2800 5000 6400 4700 5500 2800 2800 5000 6400 4700 5500 2800 2800 5000 6400 4700 5500 2800 4000 3900 2400 3100 4200 2800 4000 3900 2400 3100 4200 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2600 3100 4100 2800 2800 3900 2600 3100 4100 2800 2800 3900 2500 3100 3900 2800 2800 3900 2500 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2700 3100 3900 2800 2800 3900 2700 3100 3900 2800 2800 3900 2700 3100 3900 2800 2800 3900 2800 3100 3900 2800 2800 3900 2800 3100 3900 2800 2800 3900 2800 3100 3900 2800 2800 3700 2800 3100 3900 2800 2800 3700 2800 3100 3900 2800 2800 3700 2800 3100 3900 2800 2800 3700 2800 3100 3800 2800 2800 3700 2800 3100 3700 2800 2800 3700 2800 3100 3700 2800 2800 3700 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3600 2800 2800 3600 2800 3100 3600 2800 2800 3600 2800 3100 3600 2800 2800 3600 2800 3100 3500 2800 2800 3600 2800 3100 3500 2800 2800 3600 3000 3100 3600 2800 2800 3600 2900 3100 3500 2800 2800 3600 2900 3100 3500 2800 2800 3600 3000 3100 3500 2800 2800 3500 2900 3100 3500 2800)) :ldur (quotelvel (quoteloffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (score-mode cursor-mode scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list 0 (quote :normal) nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 802 329) 3 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 437 279) (om-make-point 29 20) 6500 "6500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch2" (om-load-patch-abs1 "conversione" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 115 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 88 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 71 134) (om-make-point 23 20) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 48 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 129 107) "no documentation" "nota-base" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 11 72) "no documentation" "lista" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 109 314) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 1 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (0 0 6 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 398 308) nil (list (list 4100 3900 2500 3100 4100 5800 5300 3900 2800 7000 6400 4700 7000 2800 4000 3900 2500 3100 4100 5800 5300 3900 4000 3900 2500 3100 4100 5800 5300 3900 2800 5000 6400 4700 5500 2800 2800 5000 6400 4700 5500 2800 2800 5000 6400 4700 5500 2800 4000 3900 2400 3100 4200 2800 4000 3900 2400 3100 4200 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2500 3100 4100 2800 2800 3900 2600 3100 4100 2800 2800 3900 2600 3100 4100 2800 2800 3900 2500 3100 3900 2800 2800 3900 2500 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2600 3100 3900 2800 2800 3900 2700 3100 3900 2800 2800 3900 2700 3100 3900 2800 2800 3900 2700 3100 3900 2800 2800 3900 2800 3100 3900 2800 2800 3900 2800 3100 3900 2800 2800 3900 2800 3100 3900 2800 2800 3700 2800 3100 3900 2800 2800 3700 2800 3100 3900 2800 2800 3700 2800 3100 3900 2800 2800 3700 2800 3100 3800 2800 2800 3700 2800 3100 3700 2800 2800 3700 2800 3100 3700 2800 2800 3700 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3700 2800 2800 3600 2800 3100 3600 2800 2800 3600 2800 3100 3600 2800 2800 3600 2800 3100 3600 2800 2800 3600 2800 3100 3500 2800 2800 3600 2800 3100 3500 2800 2800 3600 3000 3100 3600 2800 2800 3600 2900 3100 3500 2800 2800 3600 2900 3100 3500 2800 2800 3600 3000 3100 3500 2800 2800 3500 2900 3100 3500 2800)) nil "conversione"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 80) (quote "Facciamo evolvere altezze sotto forma di valori compresi fra -40 e + 40 semitoni sotto e sopra una nota base (0)") "" (om-make-point 53 27) nil (om-make-color 0.5 0.5 0.5) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEPARATOR" (quote separator) (quote ((om-load-inputfun (quote input-funbox) "cromosomes" "CROMOSOMES" nil))) (om-make-point 96 207) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVOLUTION" (quote evolution) (quote ((om-load-inputfun (quote input-funbox) "initial population" "CROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "number of generations" "NUM-OF-GEN" 50) (om-load-inputfun (quote input-funbox) "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun (quote input-funbox) "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun (quote input-funbox) "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun (quote input-funbox) "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu1 (quote input-funmenu) "rescaling method" "SCALE" (quote sigma) (list (list "Prop" (quote (quote prop))) (list "Sigma" (quote (quote sigma))))) (om-load-inputfunmenu1 (quote input-funmenu) "best of all or last generation" "RESULT" (quote all-generations) (list (list "Last generation" (quote (quote last-generation))) (list "All generations" (quote (quote all-generations))))))) (om-make-point 128 282) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHRASE-GENERATOR" (quote phrase-generator) (quote ((om-load-inputfun (quote input-funbox) "how many phrases" "NUM-PHRASES" 100) (om-load-inputfun (quote input-funbox) "lowest note" "LOW-NOTE" -40) (om-load-inputfun (quote input-funbox) "highest note" "HIGH-NOTE" 40) (om-load-inputfun (quote input-funbox) "cent division" "CENT-DEFINITION" 1) (om-load-inputfun (quote input-funbox) "dur1" "MIN-DURATION" 1/16) (om-load-inputfun (quote input-funbox) "dur2" "MAX-DURATION" 1/2) (om-load-inputfun (quote input-funbox) "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun (quote input-funbox) "total duration" "TOTAL-DURATION" 2) (om-load-inputfun (quote input-funbox) "note vs pause" "PERC-NOTE" 1.0))) (om-make-point 63 137) (om-make-point 101 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mutazioni" (quote ((let ((box (om-load-boxcall (quote genfun) "PITCH-MUTATION" (quote pitch-mutation) (quote ((om-load-inputfun (quote input-funbox) "list" "CROMOSOMES" (list 0)) (om-load-inputfun (quote input-funbox) "mutation probability" "PROB" 0.018) (om-load-inputfunmenu1 (quote input-funmenu) "mutation-type" "MUTATION-TYPE" (quote normal-add) (list (list "normal" (quote (quote normal-add))) (list "fifth" (quote (quote fifth-add))))))) (om-make-point 66 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 81 305) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CLASSIC-CROSS" (quote classic-cross) (quote ((om-load-inputfun (quote input-funbox) "parents" "CROMOSOMI" nil) (om-load-inputfun (quote input-funbox) "cross probability" "PERC" 0.65) (om-load-inputfun (quote input-funbox) "number of cross points" "PUNTI" 2))) (om-make-point 43 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 305 198) nil (list nil) "l" "mutazioni"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 1 nil 0) (9 1 6 0 nil 0) (5 0 6 1 nil 0) (10 0 8 0 nil 0) (8 1 9 0 nil 0) (0 0 9 2 nil 0) (11 0 9 3 nil 0) (2 0 10 1 nil 0) (1 0 10 2 nil 0))) nil 7.01))
