; OM File Header - Saved 2024/02/08 12:00:56
; (7.01 :patc (om-make-point 24 24) (om-make-point 204 41) (om-make-point 929 563) "" 183 0 nil "2024/02/08 12:00:56")
; End File Header
(in-package :om)(load-lib-for (quote ("GA")))(setf *om-current-persistent* (om-load-patch1 "ex2 melodies" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 78 418) (om-make-point 447 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6300) (6100) (6100) (6200) (6400) (6500) (6500))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 670 299) (om-make-point 355 293) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fitness" (om-load-patch-abs1 "fitness" (quote ((let ((box (om-load-boxcall (quote genfun) "DISTANCES1" (quote distances) (quote ((om-load-inputfun (quote input-funbox) "list of pitches" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "permitted elements" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "option" "OPTION" (quote normal) (list (list "Normal" (quote (quote normal))) (list "Octave" (quote (quote octave))) (list "Absolute" (quote (quote absolute))))) (om-load-inputfunmenu1 (quote input-funmenu) "position or not" "TYPE" (quote normal) (list (list "Normal" (quote (quote normal))) (list "Position" (quote (quote position))))))) (om-make-point 323 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list3" (quote list) (quote nil) (om-make-point 516 246) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 223 252) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 119 252) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 369 253) (om-make-point 90 30) (list 0 1 -1 2 -2) "(0 1 -1 2 -2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCH-RANGE" (quote pitch-range) (quote ((om-load-inputfun (quote input-funbox) "list of list of notes" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "maximum pitch range" "MAX-PITCH-RANGE" 15))) (om-make-point 452 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 374 55) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 230 429) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCALE1" (quote scale1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LISTE-PUNTI" nil))) (om-make-point 170 373) nil nil nil "scale1" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONTOUR-DIRECTION" (quote contour-direction) (quote ((om-load-inputfun (quote input-funbox) "list of intervals" "DIRECT-INTERVALS" nil) (om-load-inputfun (quote input-funbox) "ratio ascending melody" "IDEAL-RATIO" 0.5))) (om-make-point 62 283) nil nil nil "contour-direction" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CLIMAX-STRENGTH" (quote climax-strength) (quote ((om-load-inputfun (quote input-funbox) "list of intervals" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "ratio" "IDEAL-RATIO" 1.0))) (om-make-point 172 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "delta-conversion" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 190 101) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 134 250) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 139 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 71 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 209 311) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 36 309) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "delta-conversion" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (4 0 0 1 nil 0) (6 0 5 0 nil 0) (1 0 5 1 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (0 0 8 2 nil 0) (5 0 8 3 nil 0) (11 0 9 0 nil 0) (3 0 9 1 nil 0) (11 0 10 0 nil 0) (2 0 10 1 nil 0) (6 0 11 0 nil 0))) 7.01 nil "" (om-make-point 10 25) (om-make-point 620 492)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 172 198) nil (list nil) "l" "fitness"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 112 102) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 72 105) (om-make-point 39 30) -40 "-40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 340 286) (om-make-point 48 30) 6500 "6500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "conversion" (om-load-patch-abs1 "conversion" (quote ((let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 160 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 28 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 47 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 85 126) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 48 160) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 203 107) "no documentation" "nota-base" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 73 0) "no documentation" "lista" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 183 314) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (2 0 0 1 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (0 0 7 0 nil 0))) 7.01 nil "" (om-make-point 799 240) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 280 321) nil (list (list 6500 6300 6100 6100 6200 6400 6500 6500)) nil "conversion"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEPARATOR" (quote separator) (quote ((om-load-inputfun (quote input-funbox) "cromosomes" "CROMOSOMES" nil))) (om-make-point 49 228) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVOLUTION" (quote evolution) (quote ((om-load-inputfun (quote input-funbox) "initial population" "CROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "number of generations" "NUM-OF-GEN" 200) (om-load-inputfun (quote input-funbox) "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun (quote input-funbox) "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun (quote input-funbox) "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun (quote input-funbox) "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu1 (quote input-funmenu) "rescaling method" "SCALE" (quote prop) (list (list "Prop" (quote (quote prop))) (list "Sigma" (quote (quote sigma))))) (om-load-inputfunmenu1 (quote input-funmenu) "best of all or last generation" "RESULT" (quote last-generation) (list (list "Last generation" (quote (quote last-generation))) (list "All generations" (quote (quote all-generations))))))) (om-make-point 128 282) nil (list (list 1.0) (list (list -24 -24 -23 -21 -22 -24))) "x" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHRASE-GENERATOR" (quote phrase-generator) (quote ((om-load-inputfun (quote input-funbox) "how many phrases" "NUM-PHRASES" 100) (om-load-inputfun (quote input-funbox) "lowest note" "LOW-NOTE" -40) (om-load-inputfun (quote input-funbox) "highest note" "HIGH-NOTE" 40) (om-load-inputfun (quote input-funbox) "cent division" "CENT-DEFINITION" 1) (om-load-inputfun (quote input-funbox) "dur1" "MIN-DURATION" 1/16) (om-load-inputfun (quote input-funbox) "dur2" "MAX-DURATION" 1/2) (om-load-inputfun (quote input-funbox) "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun (quote input-funbox) "total duration" "TOTAL-DURATION" 2) (om-load-inputfun (quote input-funbox) "note vs pause" "PERC-NOTE" 1.0))) (om-make-point 63 137) (om-make-point 101 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mutation" (om-load-patch-abs1 "mutation" (quote ((let ((box (om-load-boxcall (quote genfun) "CROSSOVER" (quote crossover) (quote ((om-load-inputfun (quote input-funbox) "parents" "CHROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "cross probability" "PERC" 0.65) (om-load-inputfun (quote input-funbox) "number of cross points" "CROSS-POINT" 2))) (om-make-point 82 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCH-MUTATION" (quote pitch-mutation) (quote ((om-load-inputfun (quote input-funbox) "list" "CROMOSOMES" (list 0)) (om-load-inputfun (quote input-funbox) "mutation probability" "PROB" 0.018) (om-load-inputfunmenu1 (quote input-funmenu) "mutation-type" "MUTATION-TYPE" (quote normal-add) (list (list "normal" (quote (quote normal-add))) (list "fifth" (quote (quote fifth-add))))))) (om-make-point 66 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 81 305) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 305 198) nil (list nil) "l" "mutation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 1 nil 0) (7 1 5 0 nil 0) (4 0 5 1 nil 0) (8 0 6 0 nil 0) (6 1 7 0 nil 0) (1 0 7 2 nil 0) (9 0 7 3 nil 0) (3 0 8 1 nil 0) (2 0 8 2 nil 0))) nil 7.01))