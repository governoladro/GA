; OM File Header - Saved 2024/02/08 12:00:56
; (7.01 :patc (om-make-point 24 24) (om-make-point 38 64) (om-make-point 994 586) "" 183 0 nil "2024/02/08 12:00:56")
; End File Header
(in-package :om)(load-lib-for (quote ("GA")))(setf *om-current-persistent* (om-load-patch1 "ex5a phrases" (quote ((let ((box (om-load-boxcall (quote abstraction) "fitness" (om-load-patch-abs1 "fitness" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 668 234) (om-make-point 28 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 608 185) (om-make-point 49 30) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "delta-conversion" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 556 115) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 134 250) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 139 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 71 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 209 311) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 36 309) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "delta-conversion" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIFFERENCES 2" (quote differences) (quote ((om-load-inputfun (quote input-funbox) "list of list of values" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "permitted distance from root" "ALLOWED-ELEMENTS" (list 0 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "type" "OPTION" (quote normal) (list (list "Normal" (quote (quote normal))) (list "Octave" (quote (quote octave))) (list "Absolute" (quote (quote absolute))))) (om-load-inputfun (quote input-funbox) "ideal ratio" "IDEAL-RATIO" 0.5))) (om-make-point 557 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCH-RANGE" (quote pitch-range) (quote ((om-load-inputfun (quote input-funbox) "list of list of notes" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "maximum pitch range" "MAX-PITCH-RANGE" 30))) (om-make-point 266 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCALE1 2" (quote scale1) (quote ((om-load-inputfun (quote input-funbox) "" "FIT-VAL" nil) (om-load-inputfun (quote input-funbox) "" "FIT-VAL" nil) (om-load-inputfun (quote input-funbox) "" "FIT-VAL" nil) (om-load-inputfun (quote input-funbox) "fitness-values" "FIT-VAL" nil))) (om-make-point 310 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 69 26) (quote "pitch eval") "" (om-make-point 348 124) nil (om-make-color 0.5 0.5 0.5) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 83 26) (quote "rhythm eval") "" (om-make-point 67 106) nil (om-make-color 0.5 0.5 0.5) (om-make-font "Verdana" 11 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list4" (quote list) (quote nil) (om-make-point 321 194) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 168 131) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIFFERENCES1" (quote differences) (quote ((om-load-inputfun (quote input-funbox) "list of pitches" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "option" "OPTION" (quote normal) (list (list "Normal" (quote (quote normal))) (list "Octave" (quote (quote octave))) (list "Absolute" (quote (quote absolute))))) (om-load-inputfun (quote input-funbox) "ideal ratio" "IDEAL-RATIO" 0.0))) (om-make-point 76 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIFFERENCES" (quote differences) (quote ((om-load-inputfun (quote input-funbox) "list of pitches" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "option" "OPTION" (quote octave) (list (list "Normal" (quote (quote normal))) (list "Octave" (quote (quote octave))) (list "Absolute" (quote (quote absolute))))) (om-load-inputfun (quote input-funbox) "ideal ratio" "IDEAL-RATIO" 0.0))) (om-make-point 405 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 434 139) (om-make-point 80 30) (list 0 2 5 7 9) "(0 2 5 7 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 21 143) (om-make-point 72 30) (list 1/4 1/8) "(1/4 1/8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 233 48) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 255 424) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEPARATOR" (quote separator) (quote ((om-load-inputfun (quote input-funbox) "cromosomes" "CROMOSOMES" nil))) (om-make-point 213 102) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 1 2 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 3 nil 0) (16 1 4 0 nil 0) (8 0 4 1 nil 0) (10 0 5 0 nil 0) (11 0 5 1 nil 0) (4 0 5 2 nil 0) (3 0 5 3 nil 0) (16 0 10 0 nil 0) (13 0 10 1 nil 0) (9 0 10 3 nil 0) (16 1 11 0 nil 0) (12 0 11 1 nil 0) (5 0 15 0 nil 0) (14 0 16 0 nil 0))) 7.01 nil "" (om-make-point 254 107) (om-make-point 826 558)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 178 146) nil (list nil) "l" "fitness"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mutation" (om-load-patch-abs1 "mutation" (quote ((let ((box (om-load-boxcall (quote genfun) "CROSSOVER" (quote crossover) (quote ((om-load-inputfun (quote input-funbox) "parents" "CROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "cross probability" "PERC" 0.65) (om-load-inputfun (quote input-funbox) "number of cross points" "CROSS-POINT" 2))) (om-make-point 110 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCH-MUTATION" (quote pitch-mutation) (quote ((om-load-inputfun (quote input-funbox) "list" "CROMOSOMES" (list 0)) (om-load-inputfun (quote input-funbox) "mutation probability" "PROB" 0.001) (om-load-inputfunmenu1 (quote input-funmenu) "mutation-type" "MUTATION-TYPE" (quote normal-add) (list (list "normal" (quote (quote normal-add))) (list "fifth" (quote (quote fifth-add))))))) (om-make-point 169 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 45) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 190 252) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RHYTHMIC-MUTATION" (quote rhythmic-mutation) (quote ((om-load-inputfun (quote input-funbox) "list" "CROMOSOMES" (list 0)) (om-load-inputfun (quote input-funbox) "mutation probability" "PROB" 0.003))) (om-make-point 48 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 3 0 nil 0) (0 0 4 0 nil 0))) 7.01 nil "" (om-make-point 508 196) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 259 144) nil (list nil) "l" "mutation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHRASE-GENERATOR" (quote phrase-generator) (quote ((om-load-inputfun (quote input-funbox) "how many phrases" "NUM-PHRASES" 100) (om-load-inputfun (quote input-funbox) "lowest note" "LOW-NOTE" -20) (om-load-inputfun (quote input-funbox) "highest note" "HIGH-NOTE" 20) (om-load-inputfun (quote input-funbox) "cent division" "CENT-DEFINITION" 1) (om-load-inputfun (quote input-funbox) "dur1" "MIN-DURATION" 1/16) (om-load-inputfun (quote input-funbox) "dur2" "MAX-DURATION" 1/4) (om-load-inputfun (quote input-funbox) "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun (quote input-funbox) "total duration" "TOTAL-DURATION" 2) (om-load-inputfun (quote input-funbox) "note vs pause" "PERC-NOTE" 0.95))) (om-make-point 68 85) (om-make-point 101 53) nil nil "phrase-generator" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVOLUTION" (quote evolution) (quote ((om-load-inputfun (quote input-funbox) "initial population" "CROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "number of generations" "NUM-OF-GEN" 200) (om-load-inputfun (quote input-funbox) "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun (quote input-funbox) "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun (quote input-funbox) "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun (quote input-funbox) "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu1 (quote input-funmenu) "rescaling method" "SCALE" (quote prop) (list (list "Prop" (quote (quote prop))) (list "Sigma" (quote (quote sigma))))) (om-load-inputfunmenu1 (quote input-funmenu) "best of all or last generation" "RESULT" (quote last-generation) (list (list "Last generation" (quote (quote last-generation))) (list "All generations" (quote (quote all-generations))))))) (om-make-point 66 227) nil nil nil "evolution" 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 23 408) (om-make-point 493 151) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 0 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale player)) (list 0 (quote :normal) (quote t) 0 0 (om-make-point 10 40) (om-make-point 899 344) 4 1000 nil 6/5 0 (quote :default) (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil (quote :midi-player))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "conversion" (om-load-patch-abs1 "conversion" (quote ((let ((box (om-load-boxcall (quote abstraction) "pitch conversion" (om-load-patch-abs1 "pitch conversion" (quote ((let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 422 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 100))) (om-make-point 307 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" 12))) (om-make-point 268 77) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 233 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 243 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 28 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 47 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 85 143) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 48 160) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-pitch" 1 (om-make-point 409 7) "no documentation" "starting-pitch" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lista" 0 (om-make-point 73 0) "no documentation" "lista" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 236 343) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (9 0 0 1 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (6 0 4 1 nil 0) (10 0 5 0 nil 0) (8 0 6 0 nil 0) (5 0 8 0 nil 0) (7 0 8 1 nil 0) (4 0 11 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 230 168) nil (list (list 6800 5000 6500 6200 6500 6500 6500)) nil "pitch conversion"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 66 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 86 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 175 317) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting pitch" 1 (om-make-point 215 18) "no documentation" "starting pitch" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEPARATOR" (quote separator) (quote ((om-load-inputfun (quote input-funbox) "cromosomes" "CROMOSOMES" nil))) (om-make-point 77 67) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 93 0) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 79 313) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 0 0 nil 0) (4 0 0 1 nil 0) (5 0 1 0 nil 0) (1 0 2 0 nil 0) (0 0 3 0 nil 0) (6 0 5 0 nil 0) (2 0 7 0 nil 0))) 7.01 nil "" (om-make-point 717 189) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "tonica" nil))) (om-make-point 112 333) nil (list (list (quote ?) (list (list (list 4 4) (list 1 (list 1 (list 1 1)) (list 1 (list 1 1)) 1)) (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1.0 2 1)) (list 1 (list 1.0 3)) -1)))) (list 6000 6700 6900 6700 6200 6200 6400 6500 5500 5700 6000)) nil "conversion"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 226 271) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (0 0 3 2 nil 0) (1 0 3 3 nil 0) (5 0 4 1 nil 0) (5 1 4 2 nil 0) (3 1 5 0 nil 0) (6 0 5 1 nil 0))) nil 7.01))
