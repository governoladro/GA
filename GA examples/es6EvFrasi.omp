; OM File Header - Saved 2023/09/17 19:39:17
; (7.01 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 807 527) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for '("GA"))(setf *om-current-persistent* (om-load-patch "es. 6 evolversi di frasi#18D07E" '((om-load-boxcall 'abstraction "mypatch11" (om-load-patch-abs "valutazioni frasi" '((om-load-boxcall 'genfun "SOUND-SILENCE-RATIO" 'sound-silence-ratio '((om-load-inputfun 'input-funbox "people" "DURATIONS" nil) (om-load-inputfun 'input-funbox "ratio" "IDEAL-RATIO" 0.5)) 12910804 nil nil nil nil 1) (om-load-boxcomment "comment1" 2621520 '"valutazioni per altezze" nil 8913306 nil 0 '("Geneva" 10 :srcor)) (om-load-boxcomment "comment" 2621520 '"valutazioni per ritmi" nil 7798870 nil 0 '("Geneva" 10 :srcor)) (om-load-boxcall 'bastype "list4" 'list 'nil 11796958 1310742 12 "12" nil) (om-load-boxcall 'bastype "list3" 'list 'nil 12124554 1310743 1.0 "1.0" nil) (om-load-boxcall 'bastype "list2" 'list 'nil 11403440 1310743 0.1 "0.1" nil) (om-load-boxcall 'genfun "DIFFERENCES1" 'differences '((om-load-inputfun 'input-funbox "list of pitches" "PITCHES" nil) (om-load-inputfun 'input-funbox "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu 'input-funmenu "option" "OPTION" 'normal '(("Normal" 'normal) ("Octave" 'octave) ("Absolute" 'absolute))) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.0)) 12714044 nil nil nil nil 1) (om-load-boxcall 'genfun "SYNCOPATION" 'syncopation '((om-load-inputfun 'input-funbox "list of rhithmic values" "DUR-VALUES" nil) (om-load-inputfun 'input-funbox "tactus" "TACTUS" 1/4) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.1)) 12779656 nil nil nil nil 1) (om-load-boxcall 'genfun "CLIMAX-STRENGTH" 'climax-strength '((om-load-inputfun 'input-funbox "list of intervals" "PITCHES" nil) (om-load-inputfun 'input-funbox "ratio" "IDEAL-RATIO" 1.0)) 13107536 nil nil nil nil 1) (om-load-boxcall 'genfun "DIFFERENCES" 'differences '((om-load-inputfun 'input-funbox "list of pitches" "PITCHES" nil) (om-load-inputfun 'input-funbox "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu 'input-funmenu "option" "OPTION" 'octave '(("Normal" 'normal) ("Octave" 'octave) ("Absolute" 'absolute))) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.0)) 13107711 nil nil nil nil 1) (om-load-boxcall 'bastype "list11" 'list 'nil 10486255 1310830 (list 0 2 4 5 7 9 11) "(0 2 4 5 7 9 11)" nil) (om-load-boxcall 'genfun "PITCH-RANGE" 'pitch-range '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "maximum pitch range" "MAX-PITCH-RANGE" 12)) 13042098 nil nil nil nil 1) (om-load-boxcall 'bastype "list1" 'list 'nil 10354758 1310785 (list 1/4 1/8) "(1/4 1/8)" nil) (om-load-boxin "input" 0 3145961 "no documentation" nil nil nil) (om-load-boxout "output" 0 20971755 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 6684885 nil nil nil nil 4) (om-load-boxcall 'genfun "SCALE1" 'scale1 '((om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil)) 17170672 nil nil nil nil 1)) '((15 0 0 0 nil 0) (15 0 6 0 nil 0) (12 0 6 1 nil 0) (15 0 7 0 nil 0) (5 0 7 2 nil 0) (15 1 8 0 nil 0) (4 0 8 1 nil 0) (15 1 9 0 nil 0) (10 0 9 1 nil 0) (15 1 11 0 nil 0) (3 0 11 1 nil 0) (16 0 14 0 nil 0) (13 0 15 0 nil 0) (6 0 16 0 nil 0) (7 0 16 1 nil 0) (0 0 16 2 nil 0) (8 0 16 3 nil 0) (11 0 16 4 nil 0) (9 0 16 5 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 8323318 nil nil "l" "valutazioni frasi") (om-load-boxcall 'genfun "PHRASE-GENERATOR1" 'phrase-generator '((om-load-inputfun 'input-funbox "how many phrases" "NUM-PHRASES" 50) (om-load-inputfun 'input-funbox "lowest note" "LOW-NOTE" -12) (om-load-inputfun 'input-funbox "highest note" "HIGH-NOTE" 12) (om-load-inputfun 'input-funbox "cent division" "CENT-DEFINITION" 1) (om-load-inputfun 'input-funbox "dur1" "MIN-DURATION" 1/16) (om-load-inputfun 'input-funbox "dur2" "MAX-DURATION" 1/2) (om-load-inputfun 'input-funbox "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun 'input-funbox "total duration" "TOTAL-DURATION" 2) (om-load-inputfun 'input-funbox "note vs pause" "PERC-NOTE" 0.85)) 8650879 nil nil nil nil 1) (om-load-boxcall 'abstraction "mypatch6" (om-load-patch-abs "mutazioni" '((om-load-boxcall 'genfun "PITCH-MUTATION" 'pitch-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.2) (om-load-inputfunmenu 'input-funmenu "mutation-type" "MUTATION-TYPE" 'normal-add '(("normal" 'normal-add) ("fifth" 'fifth-add)))) 12320965 nil nil nil nil 1) (om-load-boxin "input" 0 2949169 "no documentation" nil nil nil) (om-load-boxout "output" 0 17301708 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "CLASSIC-CROSS" 'classic-cross '((om-load-inputfun 'input-funbox "parents" "CROMOSOMI" nil) (om-load-inputfun 'input-funbox "cross probability" "PERC" 0.65) (om-load-inputfun 'input-funbox "number of cross points" "PUNTI" 2)) 6946886 nil nil nil nil 1) (om-load-boxcall 'genfun "RHYTHMIC-MUTATION" 'rhythmic-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.02)) 11468848 nil nil nil nil 1)) '((4 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 8520051 nil nil "l" "mutazioni") (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 18809080 nil nil nil nil 1) (om-load-boxcall 'bastype "list2" 'list 'nil 16843114 1310749 7200 "7200" nil) (om-load-boxcall 'abstraction "mypatch21" (om-load-patch-abs "mypatch" '((om-load-boxout "output1" 1 20775087 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxin "input1" 1 1179863 "no documentation" "tonica" nil nil) (om-load-boxcall 'abstraction "mypatch21" (om-load-patch-abs "altezze" '((om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 17301701 nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 15532164 nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil 8388694 1310743 100 "100" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 10485808 nil nil nil nil 1) (om-load-boxin "input1" 1 3408046 "no documentation" "nota-base" nil nil) (om-load-boxin "input" 0 2949125 "no documentation" "lista" nil nil) (om-load-boxout "output" 0 21037251 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 1 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (0 0 6 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil) (om-load-inputfun 'input-funbox "no documentation" "input1" nil)) 11075754 nil nil nil "altezze") (om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs "ritmica" '((om-load-boxin "input" 0 2949125 "no documentation" nil nil nil) (om-load-boxout "output" 0 20971612 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "MKTREE" 'mktree '((om-load-inputfun 'input-funbox "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun 'input-funbox "list of time signatures" "TIMESIGNS" (list 4 4))) 17039452 nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT1" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 11862096 nil nil nil nil 1)) '((2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 10420257 nil nil nil "ritmica") (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 4390989 nil nil nil nil 4) (om-load-boxin "input" 0 786526 "no documentation" nil nil nil) (om-load-boxout "output" 0 20512847 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((2 0 0 0 nil 0) (4 1 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (3 0 6 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil) (om-load-inputfun 'input-funbox "no documentation" "tonica" nil)) 18940230 nil nil nil nil) (om-load-editor-box "VOICE1" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 24641744 10092958 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(221 (((4 4) ((1 (2 -1 -1)) -1 1 (1 (1.0 -3)))) ((4 4) (-1 1 (1 (1.0 1)) (1 (1.0 -2 1)))) ((4 4) ((1 (2 -1 -1)) -1 1 (1 (1.0 -3)))) ((4 4) (-1 1 (1 (1.0 1)) (1 (1.0 -2 1)))) ((4 4) ((1 (2 -1 -1)) -1 1 (1 (1.0 -3)))) ((4 4) (-1 1 (1 (1.0 1)) (1 (1.0 -2 1)))) ((4 4) ((1 (2 1 -1)) -1 1 (1 (1.0 2 -1)))) ((4 4) ((1 (-3 1)) (1 (-2 1 1)) (1 (1.0 1 -2)) (1 (-3 1)))) ((4 4) (1.0 (1 (1 -1)) (1 (-2 1 -1)) (1 (-1 1 2)))) ((4 4) ((1 (1 -3)) (1 (-1 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (-1 1)) 1.0 (1 (3 4 1)) (1 (1.0 4 -2 -1)))) ((4 4) (-1 (1 (-1 7)) (1 (3.0 -4 -1.0)) -1)) ((4 4) ((1 (-1 7)) (1 (4.0 1.0 3)) (1 (3.0 4 1)) (1 (1.0 4 -2 -1)))) ((4 4) (-1 (1 (-1 7)) (1 (3.0 -4 -1.0)) -1)) ((4 4) ((1 (-1 7)) (1 (4.0 1.0 3)) (1 (3.0 4 1)) (1 (3.0 4 1)))) ((4 4) ((1 (1.0 -7)) (1 (-3 4 1.0)) (1 (4.0 1.0 3)) (1 (1.0 -7)))) ((4 4) ((1 (-1 2 -4 1)) (1 (1.0 4 2 -1)) -1 (1 (-1 7)))) ((4 4) ((1 (3.0 4 -1)) (1 (-7 1)) (1 (1.0 -4 2 1)) (1 (3.0 2 -3)))) ((4 4) ((1 (-7 1)) 1.0 (1 (1.0 4 -3)) (1 (-4 -1.0 2 -1)))) ((4 4) ((1 (-3 2 3)) (1 (1.0 2 -4 -1.0)) (1 (-4 -1.0 3)) (1 (7.0 1)))) ((4 4) ((1 (3.0 -4 -1.0)) (1 (-3 2 -3)) (1 (-1 2 4 1)) (1 (1.0 -7)))) ((4 4) ((1 (-3 4 1.0)) (1 (4.0 1.0 3)) (1 (1.0 -7)) (1 (-1 2 -4 1)))) ((4 4) ((1 (1.0 4 2 -1)) -1 (1 (-1 7)) (1 (3.0 4 -1)))) ((4 4) ((1 (-7 1)) (1 (1.0 -4 2 1)) (1 (3.0 2 -3)) (1 (-7 1)))) ((4 4) (1.0 (1 (1.0 4 -3)) (1 (-4 -1.0 2 -1)) (1 (-3 2 3)))) ((4 4) ((1 (1.0 2 -4 -1.0)) (1 (-4 -1.0 3)) (1 (7.0 1)) (1 (3.0 -4 -1.0)))) ((4 4) ((1 (-3 2 -3)) (1 (-1 1 4 2)) -2)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)))) ((4 4) ((1 (1 2 1)) -2 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)) (1 (1 2 1)))) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 -3)) (1 (-1 1 2)) (1 (1 2 1)) -1)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)))) ((4 4) ((1 (-1 1 2)) (1 (1 2 1)) -2)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)))) ((4 4) ((1 (1 2 1)) -2 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)) (1 (1 2 1)))) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 -3)) (1 (-1 1 2)) (1 (1 2 1)) -1)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)))) ((4 4) ((1 (-1 1 2)) (1 (1 1)) (1 (1 -3)) -1)) ((4 4) ((1 (-3 1)) 1.0 (1 (1 -1)) (1 (-2 1 1)))) ((4 4) ((1 (1.0 2 1)) (1 (1.0 1 -2)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (2 1 -1)) -2 (1 (-1 3)))) ((4 4) ((1 (1.0 1)) -1 (1 (1 2 1)) (1 (1.0 2 1)))) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 -3)) (1 (-1 1 2)) (1 (1 1)) (1 (1 -3)))) ((4 4) (-1 (1 (-3 1)) 1.0 (1 (1 -1)))) ((4 4) ((1 (-2 1 1)) (1 (1.0 2 1)) (1 (1.0 1 -2)) -1)) ((4 4) (-1 1 (1 (1.0 2 -1)) (1 (-3 1)))) ((4 4) ((1 (1 1)) (1 (2 1 -1)) -2)) ((4 4) ((1 (-1 3)) (1 (1.0 1)) -1 (1 (1 2 1)))) ((4 4) ((1 (1.0 2 1)) -2 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)) (1 (1 1)))) ((4 4) ((1 (1 -3)) -1 (1 (-3 1)) 1.0)) ((4 4) ((1 (1 -1)) (1 (-2 1 1)) (1 (1.0 2 1)) (1 (1.0 1 -2)))) ((4 4) (-2 1 (1 (1.0 2 -1)))) ((4 4) ((1 (-3 1)) (1 (1 1)) (1 (2 1 -1)) -1)) ((4 4) (-1 (1 (-1 3)) (1 (1.0 1)) -1)) ((4 4) ((1 (1 2 1)) (1 (1.0 2 1)) -2)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)))) ((4 4) ((1 (1 1)) (1 (1 -3)) -1 (1 (-3 1)))) ((4 4) (1.0 (1 (1 -1)) (1 (-2 1 1)) (1 (1.0 2 1)))) ((4 4) ((1 (1.0 1 -2)) -2 1)) ((4 4) ((1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)) (1 (1 1)))) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 -3)) (1 (-1 1 2)) (1 (1 1)) (1 (1 -1)))) ((4 4) (-2 1 (1 (1.0 2 -1)))) ((4 4) ((1 (-3 1)) (1 (1 1)) (1 (1 1)) -1)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)))) ((4 4) ((1 (-1 1 2)) (1 (1 1)) (1 (1 -1)) -1)) ((4 4) (-1 1 (1 (1.0 2 -1)) (1 (-3 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) -2)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 -3)) (1 (-1 1 2)))) ((4 4) ((1 (1 1)) (1 (1 -1)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2)) ((4 4) (1 (1 (1.0 2 -1)) (1 (-3 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1 -1)))) ((4 4) (-4)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) (1 (1 (1 1)) -2)) ((4 4) (-3 1)) ((4 4) ((1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) (1 (1 1)) (1 (1 -1)) -1)) ((4 4) (-3 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)) (1 (1 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1 (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1 -1)) -2)) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1 2)) 1 (1 (1 1)))) ((4 4) (-4)) ((4 4) (-1 1 (1 (1.0 2 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 -1)) -1)) ((4 4) (-3 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)) 1)) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1 -1)))) ((4 4) (-4)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) (1 (1 (1 1)) -2)) ((4 4) (-3 1)) ((4 4) ((1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1 (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1 -1)) -2)) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1 2)) 1 (1 (1 1)))) ((4 4) (-4)) ((4 4) (-1 1 (1 (1.0 2 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 -1)) -1)) ((4 4) (-3 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)) 1)) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1 -1)))) ((4 4) (-4)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) (1 (1 (1 1)) -2)) ((4 4) (-3 1)) ((4 4) ((1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1 (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1 -1)) -2)) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1 2)) 1 (1 (1 1)))) ((4 4) (-4)) ((4 4) (-1 1 (1 (1.0 2 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 -1)) -1)) ((4 4) (-3 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)) 1)) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1 -1)))) ((4 4) (-4)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) (1 (1 (1 1)) -2)) ((4 4) (-3 1)) ((4 4) ((1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1 (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1 -1)) -2)) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1 2)) 1 (1 (1 1)))) ((4 4) (-4)) ((4 4) (-1 1 (1 (1.0 2 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 -1)) -1)) ((4 4) (-3 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)) 1)) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1 -1)))) ((4 4) (-4)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) (1 (1 (1 1)) -2)) ((4 4) (-3 1)) ((4 4) ((1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1 (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1 -1)) -2)) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1 2)) 1 (1 (1 1)))) ((4 4) (-4)) ((4 4) (-1 1 (1 (1.0 2 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1 -1)) -1)) ((4 4) (-3 (1 (-1 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)) 1)) ((4 4) ((1 (1 1)) -3)) ((4 4) (-2 1 (1 (1.0 2 1)))) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1 -1)))) ((4 4) (-4)) ((4 4) ((1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)) (1 (1.0 1 2)))) ((4 4) (1 (1 (1 1)) -2)) ((4 4) (-3 1)) ((4 4) ((1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1 -1)) -3)) ((4 4) (-1 (1 (-1 1)) (1 (3.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1 (1 (1 1)) -1)) ((4 4) (-4)) ((4 4) (1 (1 (1.0 2 1)) (1 (3.0 1)) (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1 -1)) -2)) ((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1 2)) 1 (1 (1 1)))) ((4 4) (-4)) ((4 4) (-1 1 (1 (1.0 2 1)) (1 (3.0 1)))) ((4 4) ((1 (1 1)) (1 (1.0 -1)) -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 875) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 875) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 875) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 875) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 875) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7700) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7700) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7700) :lvel (list 80) :loffset (list 0) :ldur (list 875) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7400) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 375) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7400) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 125) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((((0) nil nil) nil (0) ((0) nil)) (nil (0) ((0) (0)) ((0) nil (0))) (((0) nil nil) nil (0) ((0) nil)) (nil (0) ((0) (0)) ((0) nil (0))) (((0) nil nil) nil (0) ((0) nil)) (nil (0) ((0) (0)) ((0) nil (0))) (((0) (0) nil) nil (0) ((0) (0) nil)) ((nil (0)) (nil (0) (0)) ((0) (0) nil) (nil (0))) ((0) ((0) nil) (nil (0) nil) (nil (0) (0))) (((0) nil) (nil (0)) ((0) nil) nil) ((nil (0)) (0) ((0) (0) (0)) ((0) (0) nil nil)) (nil (nil (0)) ((0) nil nil) nil) ((nil (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) nil nil)) (nil (nil (0)) ((0) nil nil) nil) ((nil (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0))) (((0) nil) (nil (0) (0)) ((0) (0) (0)) ((0) nil)) ((nil (0) nil (0)) ((0) (0) (0) nil) nil (nil (0))) (((0) (0) nil) (nil (0)) ((0) nil (0) (0)) ((0) (0) nil)) ((nil (0)) (0) ((0) (0) nil) (nil nil (0) nil)) ((nil (0) (0)) ((0) (0) nil nil) (nil nil (0)) ((0) (0))) (((0) nil nil) (nil (0) nil) (nil (0) (0) (0)) ((0) nil)) ((nil (0) (0)) ((0) (0) (0)) ((0) nil) (nil (0) nil (0))) (((0) (0) (0) nil) nil (nil (0)) ((0) (0) nil)) ((nil (0)) ((0) nil (0) (0)) ((0) (0) nil) (nil (0))) ((0) ((0) (0) nil) (nil nil (0) nil) (nil (0) (0))) (((0) (0) nil nil) (nil nil (0)) ((0) (0)) ((0) nil nil)) ((nil (0) nil) (nil (0) (0) (0)) nil) ((nil (0)) ((0) (0)) ((0) nil) (nil (0) (0))) (((0) (0) (0)) nil (nil (0))) (((0) (0)) ((0) nil) (nil (0) (0)) ((0) (0) (0))) (nil (nil (0)) ((0) (0))) (((0) nil) (nil (0) (0)) ((0) (0) (0)) nil) (nil (nil (0)) ((0) (0)) ((0) nil)) ((nil (0) (0)) ((0) (0) (0)) nil) ((nil (0)) ((0) (0)) ((0) nil) (nil (0) (0))) (((0) (0) (0)) nil (nil (0))) (((0) (0)) ((0) nil) (nil (0) (0)) ((0) (0) (0))) (nil (nil (0)) ((0) (0))) (((0) nil) (nil (0) (0)) ((0) (0) (0)) nil) (nil (nil (0)) ((0) (0)) ((0) nil)) ((nil (0) (0)) ((0) (0)) ((0) nil) nil) ((nil (0)) (0) ((0) nil) (nil (0) (0))) (((0) (0) (0)) ((0) (0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0) nil) nil (nil (0))) (((0) (0)) nil ((0) (0) (0)) ((0) (0) (0))) (nil (nil (0)) ((0) (0))) (((0) nil) (nil (0) (0)) ((0) (0)) ((0) nil)) (nil (nil (0)) (0) ((0) nil)) ((nil (0) (0)) ((0) (0) (0)) ((0) (0) nil) nil) (nil (0) ((0) (0) nil) (nil (0))) (((0) (0)) ((0) (0) nil) nil) ((nil (0)) ((0) (0)) nil ((0) (0) (0))) (((0) (0) (0)) nil (nil (0))) (((0) (0)) ((0) nil) (nil (0) (0)) ((0) (0))) (((0) nil) nil (nil (0)) (0)) (((0) nil) (nil (0) (0)) ((0) (0) (0)) ((0) (0) nil)) (nil (0) ((0) (0) nil)) ((nil (0)) ((0) (0)) ((0) (0) nil) nil) (nil (nil (0)) ((0) (0)) nil) (((0) (0) (0)) ((0) (0) (0)) nil) ((nil (0)) ((0) (0)) ((0) nil) (nil (0) (0))) (((0) (0)) ((0) nil) nil (nil (0))) ((0) ((0) nil) (nil (0) (0)) ((0) (0) (0))) (((0) (0) nil) nil (0)) (((0) (0) nil) (nil (0)) ((0) (0)) ((0) (0))) (nil (nil (0)) ((0) (0))) (((0) nil) (nil (0) (0)) ((0) (0)) ((0) nil)) (nil (0) ((0) (0) nil)) ((nil (0)) ((0) (0)) ((0) (0)) nil) (nil (nil (0)) ((0) (0)) ((0) nil)) ((nil (0) (0)) ((0) (0)) ((0) nil) nil) (nil (0) ((0) (0) nil) (nil (0))) (((0) (0)) ((0) (0)) nil) ((nil (0)) ((0) (0)) ((0) nil) (nil (0) (0))) (((0) (0)) ((0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) ((0) ((0) (0) nil) (nil (0)) ((0) (0))) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) ((0) nil)) (nil) ((nil (0)) ((0) (0)) ((0) (0)) ((0) (0) (0))) ((0) ((0) (0)) nil) (nil (0)) (((0) (0) (0)) ((0) (0)) ((0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0))) (((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) (0) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0))) (((0) (0)) ((0) (0) (0)) (0) ((0) (0))) (nil) (nil (0) ((0) (0) (0)) ((0) (0))) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0))) (((0) (0)) ((0) (0)) ((0) (0) (0)) (0)) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) ((0) nil)) (nil) ((nil (0)) ((0) (0)) ((0) (0)) ((0) (0) (0))) ((0) ((0) (0)) nil) (nil (0)) (((0) (0) (0)) ((0) (0)) ((0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) (0) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0))) (((0) (0)) ((0) (0) (0)) (0) ((0) (0))) (nil) (nil (0) ((0) (0) (0)) ((0) (0))) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0))) (((0) (0)) ((0) (0)) ((0) (0) (0)) (0)) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) ((0) nil)) (nil) ((nil (0)) ((0) (0)) ((0) (0)) ((0) (0) (0))) ((0) ((0) (0)) nil) (nil (0)) (((0) (0) (0)) ((0) (0)) ((0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) (0) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0))) (((0) (0)) ((0) (0) (0)) (0) ((0) (0))) (nil) (nil (0) ((0) (0) (0)) ((0) (0))) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0))) (((0) (0)) ((0) (0)) ((0) (0) (0)) (0)) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) ((0) nil)) (nil) ((nil (0)) ((0) (0)) ((0) (0)) ((0) (0) (0))) ((0) ((0) (0)) nil) (nil (0)) (((0) (0) (0)) ((0) (0)) ((0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) (0) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0))) (((0) (0)) ((0) (0) (0)) (0) ((0) (0))) (nil) (nil (0) ((0) (0) (0)) ((0) (0))) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0))) (((0) (0)) ((0) (0)) ((0) (0) (0)) (0)) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) ((0) nil)) (nil) ((nil (0)) ((0) (0)) ((0) (0)) ((0) (0) (0))) ((0) ((0) (0)) nil) (nil (0)) (((0) (0) (0)) ((0) (0)) ((0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) (0) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0))) (((0) (0)) ((0) (0) (0)) (0) ((0) (0))) (nil) (nil (0) ((0) (0) (0)) ((0) (0))) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0))) (((0) (0)) ((0) (0)) ((0) (0) (0)) (0)) (((0) (0)) nil) (nil (0) ((0) (0) (0))) (((0) (0)) ((0) (0)) ((0) (0)) ((0) nil)) (nil) ((nil (0)) ((0) (0)) ((0) (0)) ((0) (0) (0))) ((0) ((0) (0)) nil) (nil (0)) (((0) (0) (0)) ((0) (0)) ((0) (0)) ((0) (0))) (((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) (((0) (0) (0)) (0) ((0) (0)) nil) (nil) ((0) ((0) (0) (0)) ((0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0))) (((0) (0)) ((0) (0) (0)) (0) ((0) (0))) (nil) (nil (0) ((0) (0) (0)) ((0) (0))) (((0) (0)) ((0) nil) nil))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) '(2 24 gf (1 15 2 2 1) 0 0 0 1 nil 1000 0 18350450 2621450 0 0 t))) t nil) (om-load-boxcall 'genfun "EVOLUTION1" 'evolution '((om-load-inputfun 'input-funbox "initial population" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "number of generations" "NUM-OF-GEN" 100) (om-load-inputfun 'input-funbox "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun 'input-funbox "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun 'input-funbox "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun 'input-funbox "perc of unchange elements" "ELITE-PERC" 15) (om-load-inputfunmenu 'input-funmenu "rescaling method" "SCALE" 'sigma '(("Prop" 'prop) ("Sigma" 'sigma))) (om-load-inputfunmenu 'input-funmenu "best of all or last generation" "RESULT" 'all-generations '(("Last generation" 'last-generation) ("All generations" 'all-generations)))) 15007936 nil nil nil "evolution" 2)) '((7 1 3 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 1 nil 0) (5 1 6 2 nil 0) (1 0 7 0 nil 0) (0 0 7 2 nil 0) (2 0 7 3 nil 0)) 'nil 4.9 '(nil nil nil nil nil nil nil nil)))
