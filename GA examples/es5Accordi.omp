; OM File Header - Saved 2023/09/17 19:39:17
; (7.01 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 842 644) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for '("GA"))(setf *om-current-persistent* (om-load-patch "es.5 verso accordi" '((om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs "esempi" '((om-load-editor-box "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) 17301593 6226079 (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((4800 5000 5100 5600) (5400 5600 6100 6400 6000) (5400 5800 6100 5500 5700 5900) (5400 5800 4800 5700 6100) (5400 5800 6100 5600) (5400 5800 6100 6400 6000) (5400 5800 6100 6400 6700)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000) :ldur '((1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000)) :lvel '((100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100)) :loffset '((0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)) :lchan '((1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) "x" nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) '(2 24 g (1 15 2 2 1) 0 0 0 1 nil 1000 0 18350450 2621450 0 0 t))) t nil) (om-load-editor-box "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) 12452105 4259970 (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((5400 6800 6500 6900 5900 5200) (6400 5000 5400 5100 6300 6200 5800 6000) (5400 6300 6000) (5600 6300 6000) (5600 6000 6300 6700)) :lonset '(0 1000 2000 3000 4000 5000) :ldur '((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000)) :lvel '((100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100)) :loffset '((0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0)) :lchan '((1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) gf 24 2))) t nil) (om-load-editor-box "CHORD-SEQ1" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) 12976189 4259970 (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 5100 6100 5200 6400) (6900 6200 7100 6300 6600 6700 7000) (5700 5900 5100 5500 5800) (5900 5100 5500 5800) (6400 6700 7000 7300)) :lonset '(0 1000 2000 3000 4000 5000) :ldur '((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000)) :lvel '((100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100)) :loffset '((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0)) :lchan '((1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) gf 24 2))) t nil) (om-load-editor-box "CHORD-SEQ21" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) 3407894 8257834 (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((4600 5000 4500 4800) (5300 5700 4500 4800) (5300 5700 5200 5500) (5300 5700 5900 6200) (5300 5700 6100 6200) (5300 5700 6100 6400)) :lonset '(0 1000 2000 3000 4000 5000 6000) :ldur '((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000)) :lvel '((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100)) :loffset '((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)) :lchan '((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) gf 24 2))) t nil)) 'nil 4.9 'nil) 'nil 3735970 nil nil nil "esempi") (om-load-editor-box "CHORD-SEQ2" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) 25624674 8257834 (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((5800 6100 6700 7000 6600 6500) (6100 6800 6900 7300 6700) (5800 6100 6900 6700 7000 6600 6500) (6100 6600 6900 7300 6700) (6300 6600 6900 7300 6700) (6300 6600 6900 7300 7600)) :lonset '(0 1000 2000 3000 4000 5000 6000) :ldur '((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000)) :lvel '((100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100)) :loffset '((0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)) :lchan '((1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) gf 24 2))) t nil) (om-load-boxcall 'bastype "list2" 'list 'nil 16056701 1310739 1 "1" nil) (om-load-boxcall 'bastype "list1" 'list 'nil 15401256 1310736 2 "2" nil) (om-load-boxcall 'genfun "REMOVE-DUP1" 'remove-dup '((om-load-inputfun 'input-funbox " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a function" "TEST" 'equal) (om-load-inputfun 'input-funbox "an integer" "DEPTH" 1)) 17563981 nil nil nil nil 1) (om-load-boxcall 'genfun "REMOVE-DUP" 'remove-dup '((om-load-inputfun 'input-funbox " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a function" "TEST" 'equal) (om-load-inputfun 'input-funbox "an integer" "DEPTH" 2)) 17039610 nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 15663215 nil nil nil nil 1) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 7274573 nil nil nil nil 4) (om-load-boxcall 'genfun "EVOLUTION1" 'evolution '((om-load-inputfun 'input-funbox "initial population" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "number of generations" "NUM-OF-GEN" 100) (om-load-inputfun 'input-funbox "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun 'input-funbox "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun 'input-funbox "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun 'input-funbox "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu 'input-funmenu "rescaling method" "SCALE" 'sigma '(("Prop" 'prop) ("Sigma" 'sigma))) (om-load-inputfunmenu 'input-funmenu "best of all or last generation" "RESULT" 'all-generations '(("Last generation" 'last-generation) ("All generations" 'all-generations)))) 11403368 nil nil nil nil 2) (om-load-boxcall 'abstraction "mypatch3" (om-load-patch-abs "mutazioni" '((om-load-boxcall 'genfun "PITCH-MUTATION" 'pitch-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.02) (om-load-inputfunmenu 'input-funmenu "mutation-type" "MUTATION-TYPE" 'fifth-add '(("normal" 'normal-add) ("fifth" 'fifth-add)))) 14745676 nil nil nil nil 1) (om-load-boxcall 'genfun "CLASSIC-CROSS" 'classic-cross '((om-load-inputfun 'input-funbox "parents" "CROMOSOMI" nil) (om-load-inputfun 'input-funbox "cross probability" "PERC" 0.65) (om-load-inputfun 'input-funbox "number of cross points" "PUNTI" 2)) 8388632 nil nil nil nil 1) (om-load-boxin "input" 0 2949169 "no documentation" nil nil nil) (om-load-boxout "output" 0 20578378 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((1 0 0 0 nil 0) (2 0 1 0 nil 0) (0 0 3 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 7012604 nil nil "l" "mutazioni") (om-load-boxcall 'abstraction "mypatch1" (om-load-patch-abs "mypatch" '((om-load-boxwithed 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) 16580724 nil nil nil (list (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) 13238380 nil nil nil nil 3) (om-load-boxcall 'genfun "X->DX" 'x->dx '((om-load-inputfun 'input-funbox "a list of numbers" "SELF" 0)) 8454256 nil nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) 5701681 nil nil nil nil 1) (om-load-boxin "input0" 0 2621445 "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 19071185 nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 19071040 nil nil nil 0)) '((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0)) 1 "convIntervalli" 'nil) (om-load-boxcall 'bastype "list4" 'list 'nil 16384387 1310743 1.0 "1.0" nil) (om-load-boxcall 'bastype "list3" 'list 'nil 16318773 1310737 12 "12" nil) (om-load-boxcall 'genfun "PITCH-VARIETY" 'pitch-variety '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "ratio different total notes" "IDEAL-RATIO" 0.24)) 17826137 nil nil nil nil 1) (om-load-boxcall 'genfun "PITCH-RANGE" 'pitch-range '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "maximum pitch range" "MAX-PITCH-RANGE" 15)) 17694992 nil nil nil "pitch-range" 1) (om-load-boxcall 'bastype "list2" 'list 'nil 16318727 1310743 0.0 "0.0" nil) (om-load-boxcall 'genfun "SCALE1" 'scale1 '((om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil)) 21758222 nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil 16318687 1310756 (list 3 4) "(3 4)" nil) (om-load-boxcall 'genfun "DIFFERENCES" 'differences '((om-load-inputfun 'input-funbox "list of pitches" "PITCHES" nil) (om-load-inputfun 'input-funbox "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu 'input-funmenu "option" "OPTION" 'normal '(("Normal" 'normal) ("Octave" 'octave) ("Absolute" 'absolute))) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 1.0)) 17694918 nil nil nil nil 1) (om-load-boxin "input" 0 10748066 "no documentation" nil nil nil) (om-load-boxout "output" 0 25297151 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((9 0 0 0 nil 0) (9 0 3 0 nil 0) (1 0 3 1 nil 0) (9 0 4 0 nil 0) (2 0 4 1 nil 0) (8 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (0 0 8 0 nil 0) (7 0 8 1 nil 0) (5 0 8 3 nil 0) (6 0 10 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 6946995 nil nil "l" nil) (om-load-boxwithed 'box-with-win "OMLOOP1" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil) (om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) 16646303 nil nil nil (list (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 14155913 nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil 9240678 1310743 100 "100" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 10813524 nil nil nil nil 1) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) 17891453 nil nil nil nil 3) (om-load-boxin "input1" 1 3866843 "no documentation" nil nil nil) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) 5898284 nil nil nil nil 1) (om-load-boxin "input0" 0 2621445 "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 22216860 nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 22478912 nil nil nil 0)) '((2 0 0 0 nil 0) (4 0 0 1 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (6 0 5 0 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0)) 1 "convAltezze" 'nil) (om-load-boxcall 'genfun "PHRASE-GENERATOR" 'phrase-generator '((om-load-inputfun 'input-funbox "how many phrases" "NUM-PHRASES" 100) (om-load-inputfun 'input-funbox "lowest note" "LOW-NOTE" -15) (om-load-inputfun 'input-funbox "highest note" "HIGH-NOTE" 15) (om-load-inputfun 'input-funbox "cent division" "CENT-DEFINITION" 1) (om-load-inputfun 'input-funbox "dur1" "MIN-DURATION" 1/16) (om-load-inputfun 'input-funbox "dur2" "MAX-DURATION" 1/2) (om-load-inputfun 'input-funbox "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun 'input-funbox "total duration" "TOTAL-DURATION" 2) (om-load-inputfun 'input-funbox "note vs pause" "PERC-NOTE" 0.88)) 3407962 3473509 nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil 15139013 1310749 6000 "6000" nil)) '((4 0 1 1 nil 0) (5 0 4 0 nil 0) (2 0 4 2 nil 0) (11 0 5 0 nil 0) (3 0 5 2 nil 0) (8 1 6 0 nil 0) (12 0 7 0 nil 0) (7 1 8 0 nil 0) (10 0 8 2 nil 0) (9 0 8 3 nil 0) (6 0 11 0 nil 0) (13 0 11 1 nil 0)) 'nil 4.9 '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))
