; OM File Header - Saved 2023/09/17 19:39:23
; (7.01 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 914 636) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for '("GA"))(setf *om-current-persistent* (om-load-patch "ricerca serie" '((om-load-boxcall 'abstraction "mypatch3" (om-load-patch-abs "serie" '((om-load-editor-box "VOICE2" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 20643886 7864802 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(3 (((4 4) ((1 (1 1)) 1.0 1 (1 (1.0 3)))) ((4 4) (1.0 (1 (1 3)) 1 (1 (2.0 1 1)))) ((4 4) ((1 (1 1)) (1 (3.0 1)) (1 (1.0 -1)) -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((((1) (1)) (1) (1) ((1) (1))) ((1) ((1) (1)) (1) ((1) (1) (1))) (((1) (0)) ((0) (0)) ((0) nil) nil))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) "x" nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) '(2 24 gf (1 15 2 2 1) 0 0 0 1 nil 1000 0 18350450 2621450 0 0 t))) t nil) (om-load-editor-box "VOICE1" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 11796532 7995858 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(3 (((4 4) ((1 (3 1)) (1 (1.0 1)) 1 (1 (1.0 3)))) ((4 4) ((1 (1.0 3)) (1 (1.0 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (2.0 1 1)) (1 (3.0 1)) (1 (1.0 -3)))))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5000) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((((1) (1)) ((1) (1)) (1) ((1) (1))) (((1) (1)) ((1) (1)) ((1) (1)) (1)) (((1) (1)) ((1) (1) (1)) ((1) (1)) ((1) nil)))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) '(2 24 gf (1 15 2 2 1) 0 0 0 1 nil 1000 0 18350450 2621450 0 0 t))) t nil) (om-load-editor-box "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 3080247 7995725 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(3 (((4 4) (1 (1 (1.0 3)) 1.0 1)) ((4 4) ((1 (1.0 1)) 1.0 1 (1 (1 3)))) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(1)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil))))) (load-port-info newobj '(((1) ((1) (1)) (1) (1)) (((1) (1)) (1) (1) ((1) (1))) (nil))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) '(2 24 g (1 15 2 2 1) 0 0 0 1 nil 1000 0 18350450 2621450 0 0 t))) t nil)) 'nil 4.9 'nil) 'nil 6816177 nil nil nil "serie") (om-load-boxcall 'bastype "list" 'list 'nil 17694912 1310749 6000 "6000" nil) (om-load-boxcall 'abstraction "mypatch2" (om-load-patch-abs "mypatch" '((om-load-boxout "output1" 1 20775087 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxin "input1" 1 1179863 "no documentation" "tonica" nil nil) (om-load-boxcall 'abstraction "mypatch21" (om-load-patch-abs "altezze" '((om-load-boxcall 'genfun "FLAT1" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 6357012 nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 17301701 nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 15532164 nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil 8388694 1310743 100 "100" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 10485808 nil nil nil nil 1) (om-load-boxin "input1" 1 3408046 "no documentation" "nota-base" nil nil) (om-load-boxin "input" 0 2949125 "no documentation" "lista" nil nil) (om-load-boxout "output" 0 21037251 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((6 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (5 0 2 1 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (1 0 7 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil) (om-load-inputfun 'input-funbox "no documentation" "input1" nil)) 11075754 nil nil nil "altezze") (om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs "ritmica" '((om-load-boxin "input" 0 2949125 "no documentation" nil nil nil) (om-load-boxout "output" 0 20971612 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "MKTREE" 'mktree '((om-load-inputfun 'input-funbox "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun 'input-funbox "list of time signatures" "TIMESIGNS" (list 4 4))) 17039452 nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT1" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 11862096 nil nil nil nil 1)) '((2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 10420257 nil nil nil "ritmica") (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 4390989 nil nil nil nil 4) (om-load-boxin "input" 0 786526 "no documentation" nil nil nil) (om-load-boxout "output" 0 20512847 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((2 0 0 0 nil 0) (4 1 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (3 0 6 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil) (om-load-inputfun 'input-funbox "no documentation" "tonica" nil)) 19595394 nil nil nil nil) (om-load-editor-box "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 24117297 7864802 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(3 (((4 4) ((1 (3 1)) 1 (1 (1.0 3)) 1.0)) ((4 4) ((1 (2 1 1)) (1 (3.0 1)) (1 (1 1 2)) 1.0)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((((0) (0)) (0) ((0) (0)) (0)) (((0) (0) (0)) ((0) (0)) ((0) (0) (0)) (0)) (nil))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) '(2 24 gf (1 15 2 2 1) 0 0 0 1 nil 1000 0 18350450 2621450 0 0 t))) t nil) (om-load-boxcall 'genfun "EVOLUTION" 'evolution '((om-load-inputfun 'input-funbox "initial population" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "number of generations" "NUM-OF-GEN" 250) (om-load-inputfun 'input-funbox "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun 'input-funbox "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun 'input-funbox "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun 'input-funbox "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu 'input-funmenu "rescaling method" "SCALE" 'sigma '(("Prop" 'prop) ("Sigma" 'sigma))) (om-load-inputfunmenu 'input-funmenu "best of all or last generation" "RESULT" 'last-generation '(("Last generation" 'last-generation) ("All generations" 'all-generations)))) 16187478 nil nil nil "evolution" 2) (om-load-boxcall 'abstraction "mypatch1" (om-load-patch-abs "valutazioni" '((om-load-boxcall 'genfun "REPEATED" 'repeated '((om-load-inputfun 'input-funbox "list of events" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "ratio diatonic intervals" "IDEAL-RATIO" 0.0)) 11665656 nil nil nil nil 1) (om-load-boxcall 'genfun "SYNCOPATION" 'syncopation '((om-load-inputfun 'input-funbox "list of rhithmic values" "DUR-VALUES" nil) (om-load-inputfun 'input-funbox "tactus" "TACTUS" 1/4) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.1)) 11665569 nil nil nil nil 1) (om-load-boxcall 'genfun "SCALE1" 'scale1 '((om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil)) 19464456 nil nil nil nil 1) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 3539161 nil nil nil nil 4) (om-load-boxcall 'genfun "PITCH-VARIETY" 'pitch-variety '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "ratio different total notes" "IDEAL-RATIO" 1.0)) 10944890 nil nil nil nil 1) (om-load-boxwithed 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) 10945000 nil nil nil (list (om-load-boxin "input0" 0 3211337 "no documentation" nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) 23527639 nil nil nil nil 3) (om-load-boxcall 'genfun "OM/" 'om/ '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 1)) 20447474 nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil 12910874 1376283 12.0 "12.0" nil) (om-load-boxcall 'genfun "OM-ABS" 'om-abs '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1)) 16777403 nil nil nil nil 1) (om-load-boxcall 'genfun "OM-" 'om- '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 14418130 nil nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) 7733317 nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) 9896150 nil nil nil nil 1) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 29294885 nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 28966992 nil nil nil 0)) '((2 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 6 0 nil 0) (6 0 7 0 nil 0) (1 1 8 0 nil 0) (1 0 9 0 nil 0)) 1 "conta12" 'nil) (om-load-boxwithed 'box-with-win "OMLOOP2" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) 10092856 nil nil nil (list (om-load-boxin "input0" 0 3670045 "no documentation" nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) 14745793 nil nil nil nil 3) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) 7602282 nil nil nil nil 1) (om-load-boxwithed 'box-with-win "OMLOOP1" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) 10944676 nil nil nil (list (om-load-boxcall 'lispfun "MOD" 'mod '((om-load-inputfun 'input-funbox "NUMBER" "NUMBER" nil) (om-load-inputfun 'input-funbox "DIVISOR" "DIVISOR" 12)) 14614737 nil nil nil nil 1) (om-load-boxin "input0" 0 3211337 "no documentation" nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) 19464375 nil nil nil nil 3) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) 7733317 nil nil nil nil 1) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 29294885 nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 28966992 nil nil nil 0)) '((3 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (2 1 4 0 nil 0) (2 0 5 0 nil 0)) 1 "modulo12" 'nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 19661085 nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 19726460 nil nil nil 0)) '((3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0)) 1 "omloop" 'nil) (om-load-boxin "input" 0 1179764 "no documentation" nil nil nil) (om-load-boxout "output" 0 26542254 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((3 1 0 0 nil 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (5 0 2 2 nil 0) (7 0 3 0 nil 0) (6 0 4 0 nil 0) (3 1 5 0 nil 0) (3 1 6 0 nil 0) (2 0 8 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 10617002 nil nil "l" "valutazioni") (om-load-boxcall 'genfun "PHRASE-GENERATOR" 'phrase-generator '((om-load-inputfun 'input-funbox "how many phrases" "NUM-PHRASES" 150) (om-load-inputfun 'input-funbox "lowest note" "LOW-NOTE" -12) (om-load-inputfun 'input-funbox "highest note" "HIGH-NOTE" 12) (om-load-inputfun 'input-funbox "cent division" "CENT-DEFINITION" 1) (om-load-inputfun 'input-funbox "dur1" "MIN-DURATION" 1/16) (om-load-inputfun 'input-funbox "dur2" "MAX-DURATION" 1/2) (om-load-inputfun 'input-funbox "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun 'input-funbox "total duration" "TOTAL-DURATION" 2) (om-load-inputfun 'input-funbox "note vs pause" "PERC-NOTE" 0.8)) 4522100 3473509 nil nil nil 1) (om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs "mutazioni" '((om-load-boxcall 'genfun "PITCH-MUTATION" 'pitch-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.02) (om-load-inputfunmenu 'input-funmenu "mutation-type" "MUTATION-TYPE" 'normal-add '(("normal" 'normal-add) ("fifth" 'fifth-add)))) 14680262 nil nil nil nil 1) (om-load-boxin "input" 0 2949169 "no documentation" nil nil nil) (om-load-boxout "output" 0 20578523 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "CLASSIC-CROSS" 'classic-cross '((om-load-inputfun 'input-funbox "parents" "CROMOSOMI" nil) (om-load-inputfun 'input-funbox "cross probability" "PERC" 0.65) (om-load-inputfun 'input-funbox "number of cross points" "PUNTI" 1)) 7143519 nil nil nil nil 1) (om-load-boxcall 'genfun "RHYTHMIC-MUTATION" 'rhythmic-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.02)) 13172769 nil nil nil nil 1)) '((4 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 10748183 nil nil "l" "mutazioni")) '((4 1 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 1 nil 0) (2 1 3 2 nil 0) (6 0 4 0 nil 0) (5 0 4 2 nil 0) (7 0 4 3 nil 0)) 'nil 4.9 '(nil nil nil nil nil nil nil nil)))
