; OM File Header - Saved 2023/09/17 19:39:20
; (7.01 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 717 479) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for '("GA"))(setf *om-current-persistent* (om-load-patch "es.8 doppia evoluzione" '((om-load-editor-box "POLY" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) 26345823 4259970 (if (find-class 'poly nil) (let ((newobj (make-instance 'poly :voices (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(199 (((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (-1 (1 (-1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) -1 (1 (-1 1)))) ((4 4) (-1 (1 (-1 3)) (1 (1.0 3)) 1.0)) ((4 4) (1 1 -1 (1 (-1 1)))) ((4 4) (-1 (1 (-1 3)) (1 (1.0 3)) 1.0)) ((4 4) (1 (1 (1 -1)) -1 (1 (1 -1)))) ((4 4) ((1 (-3 1)) (1 (3.0 1)) 1.0 (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) -1 (1 (-1 1)) -1)) ((4 4) ((1 (-1 3)) (1 (1.0 3)) 1.0 1)) ((4 4) ((1 (1 -1)) -1 (1 (1 -1)) (1 (-3 1)))) ((4 4) ((1 (3.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (-1 (1 (-1 1)) -1 (1 (-1 3)))) ((4 4) ((1 (1.0 3)) 1.0 1 (1 (1 -1)))) ((4 4) (-1 (1 (1 -1)) (1 (-3 1)) (1 (3.0 1)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 1)) -1)) ((4 4) ((1 (-1 1)) -1 (1 (-1 3)) (1 (1.0 3)))) ((4 4) (1.0 1 (1 (1 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) -1 (1 (-1 1)))) ((4 4) (-1 (1 (-1 3)) (1 (1.0 3)) 1.0)) ((4 4) (1 (1 (1 -1)) -1 (1 (1 -1)))) ((4 4) ((1 (-3 1)) (1 (3.0 1)) 1.0 (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) -1 (1 (-1 1)) -1)) ((4 4) ((1 (-1 3)) (1 (1.0 3)) 1.0 1)) ((4 4) ((1 (1 -1)) -1 (1 (1 -1)) (1 (-3 1)))) ((4 4) ((1 (3.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (-1 (1 (-1 1)) -1 (1 (-1 3)))) ((4 4) ((1 (1.0 3)) 1.0 1 (1 (1 -1)))) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) nil (nil (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) (0) nil (nil (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) ((0) nil) nil ((0) nil)) ((nil (0)) ((0) (0)) (0) ((0) (0))) (((0) (0)) nil (nil (0)) nil) ((nil (0)) ((0) (0)) (0) (0)) (((0) nil) nil ((0) nil) (nil (0))) (((0) (0)) (0) ((0) (0)) ((0) (0))) (nil (nil (0)) nil (nil (0))) (((0) (0)) (0) (0) ((0) nil)) (nil ((0) nil) (nil (0)) ((0) (0))) ((0) ((0) (0)) ((0) (0)) nil) ((nil (0)) nil (nil (0)) ((0) (0))) ((0) (0) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) nil (nil (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) ((0) nil) nil ((0) nil)) ((nil (0)) ((0) (0)) (0) ((0) (0))) (((0) (0)) nil (nil (0)) nil) ((nil (0)) ((0) (0)) (0) (0)) (((0) nil) nil ((0) nil) (nil (0))) (((0) (0)) (0) ((0) (0)) ((0) (0))) (nil (nil (0)) nil (nil (0))) (((0) (0)) (0) (0) ((0) nil)) (nil))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(156 (((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -1)) -1)) ((4 4) ((1 (1 -1)) (1 (-3 1)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) -1)) ((4 4) ((1 (-1 3)) (1 (1.0 3)) 1.0 1)) ((4 4) (1 (1 (1 -1)) (1 (-3 1)) (1 (3.0 1)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (-1 (1 (-1 3)) (1 (1.0 3)) 1.0)) ((4 4) (1 1 1 1)) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)) 1)) ((4 4) (1 1 (1 (3.0 1)) (1 (3.0 -1)))) ((4 4) (-1 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (1 1 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 3)) (1 (1.0 -3)))) ((4 4) ((1 (-1 1)) 1 1 1)) ((4 4) ((1 (3.0 1)) (1 (3.0 -1)) -1 (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 3)))) ((4 4) ((1 (1.0 -3)) (1 (-1 1)) 1 1)) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)) 1)) ((4 4) (1 1 (1 (3.0 1)) (1 (3.0 -1)))) ((4 4) (-1 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (1 1 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 3)) (1 (1.0 -3)))) ((4 4) ((1 (-1 1)) 1 (1 (1 1)) 1.0)) ((4 4) ((1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)) 1)) ((4 4) ((1 (1 1)) 1.0 (1 (1.0 3)) (1 (1.0 -3)))) ((4 4) ((1 (-1 1)) 1 1 1)) ((4 4) ((1 (3.0 1)) (1 (3.0 -1)) -1 (1 (1 1)))) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 3)))) ((4 4) ((1 (1.0 -3)) (1 (-1 1)) 1 (1 (1 1)))) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 -3)) (1 (-1 1)))) ((4 4) (1 1 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 1)) (1 (1.0 1)) 1 (1 (3.0 1)))) ((4 4) ((1 (3.0 -1)) -1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (3.0 1)) (1 (3.0 -1)) -1)) ((4 4) ((1 (1 -1)) -3)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4700) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 3900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 3900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) (0)) nil) ((nil (0)) ((0) (0)) (0) (0)) ((0) ((0) nil) (nil (0)) ((0) (0))) ((0) ((0) (0)) ((0) (0)) ((0) (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) (0) (0) (0)) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) ((0) (0)) (0)) (((0) (0)) ((0) nil) (nil (0)) (0)) ((0) (0) ((0) (0)) ((0) nil)) (nil ((0) (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) ((0) (0) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) (((0) (0)) (0) ((0) (0)) ((0) nil)) ((nil (0)) (0) (0) (0)) (((0) (0)) ((0) nil) nil ((0) (0))) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) (nil (0)) (0) (0)) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) ((0) (0)) (0)) (((0) (0)) ((0) nil) (nil (0)) (0)) ((0) (0) ((0) (0)) ((0) nil)) (nil ((0) (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) ((0) (0) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) (((0) (0)) (0) ((0) (0)) ((0) nil)) ((nil (0)) (0) ((0) (0)) (0)) (((0) (0)) ((0) nil) (nil (0)) (0)) (((0) (0)) (0) ((0) (0)) ((0) nil)) ((nil (0)) (0) (0) (0)) (((0) (0)) ((0) nil) nil ((0) (0))) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) (nil (0)) (0) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) ((0) (0) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) nil) nil))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) :from-file t))) (load-port-info newobj '(((((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (nil (nil (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) nil (nil (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) (0) nil (nil (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) ((0) nil) nil ((0) nil)) ((nil (0)) ((0) (0)) (0) ((0) (0))) (((0) (0)) nil (nil (0)) nil) ((nil (0)) ((0) (0)) (0) (0)) (((0) nil) nil ((0) nil) (nil (0))) (((0) (0)) (0) ((0) (0)) ((0) (0))) (nil (nil (0)) nil (nil (0))) (((0) (0)) (0) (0) ((0) nil)) (nil ((0) nil) (nil (0)) ((0) (0))) ((0) ((0) (0)) ((0) (0)) nil) ((nil (0)) nil (nil (0)) ((0) (0))) ((0) (0) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) nil (nil (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) ((0) nil) nil ((0) nil)) ((nil (0)) ((0) (0)) (0) ((0) (0))) (((0) (0)) nil (nil (0)) nil) ((nil (0)) ((0) (0)) (0) (0)) (((0) nil) nil ((0) nil) (nil (0))) (((0) (0)) (0) ((0) (0)) ((0) (0))) (nil (nil (0)) nil (nil (0))) (((0) (0)) (0) (0) ((0) nil)) (nil)) ((((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) nil) nil) (((0) nil) (nil (0)) ((0) (0)) (0)) (((0) (0)) ((0) (0)) ((0) (0)) nil) ((nil (0)) ((0) (0)) (0) (0)) ((0) ((0) nil) (nil (0)) ((0) (0))) ((0) ((0) (0)) ((0) (0)) ((0) (0))) (nil (nil (0)) ((0) (0)) (0)) ((0) (0) (0) (0)) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) ((0) (0)) (0)) (((0) (0)) ((0) nil) (nil (0)) (0)) ((0) (0) ((0) (0)) ((0) nil)) (nil ((0) (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) ((0) (0) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) (((0) (0)) (0) ((0) (0)) ((0) nil)) ((nil (0)) (0) (0) (0)) (((0) (0)) ((0) nil) nil ((0) (0))) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) (nil (0)) (0) (0)) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) ((0) (0)) (0)) (((0) (0)) ((0) nil) (nil (0)) (0)) ((0) (0) ((0) (0)) ((0) nil)) (nil ((0) (0)) ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) ((0) (0) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) (((0) (0)) (0) ((0) (0)) ((0) nil)) ((nil (0)) (0) ((0) (0)) (0)) (((0) (0)) ((0) nil) (nil (0)) (0)) (((0) (0)) (0) ((0) (0)) ((0) nil)) ((nil (0)) (0) (0) (0)) (((0) (0)) ((0) nil) nil ((0) (0))) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) (nil (0)) (0) ((0) (0))) ((0) ((0) (0)) ((0) nil) (nil (0))) ((0) (0) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) (0)) ((0) (0)) (0) ((0) (0))) (((0) nil) nil ((0) (0)) ((0) (0))) ((0) ((0) (0)) ((0) nil) nil) (((0) nil) nil)))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs "patch" 'nil 'nil 4.9 'nil)))) newobj)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) (gf gf) 24 2))) t nil) (om-load-boxcall 'genfun "X-APPEND" 'x-append '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) 26214653 nil nil nil nil 1) (om-load-boxcall 'bastype "list1" 'list 'nil 19005764 1310749 4800 "4800" nil) (om-load-boxcall 'abstraction "mypatch31" (om-load-patch-abs "voce1" '((om-load-boxout "output" 0 26935477 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-editor-box "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 21889219 4259970 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) g 24 2))) t nil) (om-load-boxin "input1" 1 4456757 "no documentation" "registro" nil nil) (om-load-boxcall 'genfun "FLAT2" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 10879234 nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 17367315 nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 100)) 14942476 nil nil nil nil 1) (om-load-boxcall 'genfun "MKTREE" 'mktree '((om-load-inputfun 'input-funbox "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun 'input-funbox "list of time signatures" "TIMESIGNS" (list 4 4))) 13631636 nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 10354798 nil nil nil nil 1) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 9109675 nil nil nil nil 4) (om-load-boxin "input" 0 2949125 "no documentation" nil nil nil)) '((1 0 0 0 nil 0) (6 0 1 1 nil 0) (4 0 1 2 nil 0) (8 1 3 0 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil) (om-load-inputfun 'input-funbox "no documentation" "registro" nil)) 21430580 nil nil nil "voce1") (om-load-boxcall 'bastype "list" 'list 'nil 19005689 1310749 6500 "6500" nil) (om-load-boxcall 'abstraction "mypatch3" (om-load-patch-abs "voce1" '((om-load-boxout "output" 0 26214566 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-editor-box "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) 21561500 4259970 (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj 'nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) '(t 0 0 2621450 18350450 0 1000 nil 1 0 0 0 (1 15 2 2 1) g 24 2))) t nil) (om-load-boxin "input1" 1 4456757 "no documentation" "registro" nil nil) (om-load-boxcall 'genfun "FLAT2" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 10879234 nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) 17367315 nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 100)) 14942476 nil nil nil nil 1) (om-load-boxcall 'genfun "MKTREE" 'mktree '((om-load-inputfun 'input-funbox "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun 'input-funbox "list of time signatures" "TIMESIGNS" (list 4 4))) 13631636 nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) 10354798 nil nil nil nil 1) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 9109675 nil nil nil nil 4) (om-load-boxin "input" 0 2949125 "no documentation" nil nil nil)) '((1 0 0 0 nil 0) (6 0 1 1 nil 0) (4 0 1 2 nil 0) (8 1 3 0 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil) (om-load-inputfun 'input-funbox "no documentation" "registro" nil)) 21299424 nil nil nil "voce1") (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 17301680 nil nil nil nil 1) (om-load-boxcall 'abstraction "mypatch2" (om-load-patch-abs "mutazione" '((om-load-boxcall 'genfun "RE-RO" 're-ro '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.22)) 14680259 nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSPOSITION" 'transposition '((om-load-inputfun 'input-funbox "parents" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.23) (om-load-inputfunmenu 'input-funmenu "mutation-type of mutation" "MUTATION-TYPE" 'fifth-add '(("normal" 'normal-add) ("fifth" 'fifth-add)))) 14811452 nil nil nil nil 1) (om-load-boxcall 'genfun "INVERTED" 'inverted '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.22)) 14745848 nil nil nil nil 1) (om-load-boxcall 'lispfun "RETRO" 'retro '((om-load-inputfun 'input-funbox "CROMOSOMES" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "PROB" "PROB" 0.25)) 14942331 nil nil nil nil 1) (om-load-boxcall 'genfun "RHYTHMIC-MUTATION" 'rhythmic-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.004)) 10354774 nil nil nil nil 1) (om-load-boxcall 'genfun "CLASSIC-CROSS" 'classic-cross '((om-load-inputfun 'input-funbox "parents" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "cross probability" "PERC" 0.7) (om-load-inputfun 'input-funbox "number of cross points" "CROSS-POINT" 2)) 6750280 nil nil nil nil 1) (om-load-boxin "input" 0 3211322 "no documentation" nil nil nil) (om-load-boxout "output" 0 20382040 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil)) '((3 0 0 0 nil 0) (2 0 1 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (1 0 7 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 8913199 nil nil "l" "mutazione") (om-load-boxcall 'abstraction "mypatch1" (om-load-patch-abs "valutazione" '((om-load-boxcall 'bastype "list4" 'list 'nil 11403766 1310743 0.1 "0.1" nil) (om-load-boxcall 'bastype "list3" 'list 'nil 11403651 1310737 15 "15" nil) (om-load-boxcall 'bastype "list2" 'list 'nil 11731255 1310749 0.8 "0.8" nil) (om-load-boxcall 'bastype "list1" 'list 'nil 11534549 1310743 0.6 "0.6" nil) (om-load-boxcall 'bastype "list" 'list 'nil 11468895 1310737 2 "2" nil) (om-load-boxcall 'genfun "SCALE1" 'scale1 '((om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil) (om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil) (om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil) (om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil) (om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil)) 18415795 nil nil nil nil 1) (om-load-boxcall 'genfun "RHYTHMIC-RANGE" 'rhythmic-range '((om-load-inputfun 'input-funbox "list of list of rhythmic values" "DURATIONS" nil) (om-load-inputfun 'input-funbox "best rhythmic escursion" "RANGE" 2)) 11665433 nil nil nil nil 1) (om-load-boxcall 'genfun "SOUND-SILENCE-RATIO" 'sound-silence-ratio '((om-load-inputfun 'input-funbox "people" "DURATIONS" nil) (om-load-inputfun 'input-funbox "ratio" "IDEAL-RATIO" 0.6)) 11731062 nil nil nil nil 1) (om-load-boxwithed 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) 8061296 nil nil nil (list (om-load-boxin "input0" 0 2228252 "no documentation" nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) 15269982 nil nil nil nil 3) (om-load-boxcall 'genfun "X->DX" 'x->dx '((om-load-inputfun 'input-funbox "a list of numbers" "SELF" 0)) 9699442 nil nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) 6619147 nil nil nil nil 1) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 20578535 nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) 20447259 nil nil nil 0)) '((2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0)) 1 "converti in intervalli" 'nil) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 7405701 nil nil nil nil 4) (om-load-boxin "input" 0 4980965 "no documentation" nil nil nil) (om-load-boxout "output" 0 22151381 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "DISSONANT-INTERVALS" 'dissonant-intervals '((om-load-inputfun 'input-funbox "list of intervals" "INTERVALS" nil) (om-load-inputfun 'input-funbox "ratio dissonant total intervals" "IDEAL-RATIO" 0.01)) 11796885 nil nil nil nil 1) (om-load-boxcall 'genfun "PITCH-RANGE" 'pitch-range '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "maximum pitch range" "MAX-PITCH-RANGE" 15)) 11796808 nil nil nil nil 1) (om-load-boxcall 'genfun "PITCH-VARIETY" 'pitch-variety '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "ratio different total notes" "IDEAL-RATIO" 0.24)) 11731185 nil nil nil "pitch-variety" 1)) '((6 0 5 0 nil 0) (7 0 5 1 nil 0) (14 0 5 2 nil 0) (13 0 5 3 nil 0) (12 0 5 4 nil 0) (9 0 6 0 nil 0) (4 0 6 1 nil 0) (9 1 7 0 nil 0) (3 0 7 1 nil 0) (9 1 8 0 nil 0) (10 0 9 0 nil 0) (5 0 11 0 nil 0) (8 0 12 0 nil 0) (0 0 12 1 nil 0) (9 1 13 0 nil 0) (1 0 13 1 nil 0) (9 1 14 0 nil 0) (2 0 14 1 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 8782052 nil nil "l" "valutazione") (om-load-boxcall 'genfun "EVOLUTION-STATIONARY" 'evolution-stationary '((om-load-inputfun 'input-funbox "initial population" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "number of generations" "NUM-OF-GEN" 100) (om-load-inputfun 'input-funbox "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun 'input-funbox "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun 'input-funbox "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun 'input-funbox "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu 'input-funmenu "rescaling method" "SCALE" 'prop '(("Prop" 'prop) ("Sigma" 'sigma))) (om-load-inputfunmenu 'input-funmenu "best of all or last generation" "RESULT" 'all-generations '(("Last generation" 'last-generation) ("All generations" 'all-generations)))) 13434985 nil nil nil nil 2) (om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs "prima generazione" '((om-load-boxcall 'genfun "FLAT1" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 14680288 nil nil nil nil 1) (om-load-boxout "output" 0 20840687 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "LIST-MODULO" 'list-modulo '((om-load-inputfun 'input-funbox "a list" "LIST" nil) (om-load-inputfun 'input-funbox "modulo" "NCOL" 10)) 14483590 nil nil nil nil 1) (om-load-boxcall 'abstraction "mypatch11" (om-load-patch-abs "valutazioni frasi" '((om-load-boxcall 'genfun "SOUND-SILENCE-RATIO" 'sound-silence-ratio '((om-load-inputfun 'input-funbox "people" "DURATIONS" nil) (om-load-inputfun 'input-funbox "ratio" "IDEAL-RATIO" 0.5)) 12910804 nil nil nil nil 1) (om-load-boxcomment "comment1" 2621520 '"valutazioni per altezze" nil 8913306 nil 0 '("Geneva" 10 :srcor)) (om-load-boxcomment "comment" 2621520 '"valutazioni per ritmi" nil 7798870 nil 0 '("Geneva" 10 :srcor)) (om-load-boxcall 'bastype "list4" 'list 'nil 11796958 1310742 12 "12" nil) (om-load-boxcall 'bastype "list3" 'list 'nil 12124554 1310743 1.0 "1.0" nil) (om-load-boxcall 'bastype "list2" 'list 'nil 11403440 1310743 0.1 "0.1" nil) (om-load-boxcall 'genfun "DIFFERENCES1" 'differences '((om-load-inputfun 'input-funbox "list of pitches" "PITCHES" nil) (om-load-inputfun 'input-funbox "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu 'input-funmenu "option" "OPTION" 'normal '(("Normal" 'normal) ("Octave" 'octave) ("Absolute" 'absolute))) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.0)) 12714044 nil nil nil nil 1) (om-load-boxcall 'genfun "SYNCOPATION" 'syncopation '((om-load-inputfun 'input-funbox "list of rhithmic values" "DUR-VALUES" nil) (om-load-inputfun 'input-funbox "tactus" "TACTUS" 1/4) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.1)) 12779656 nil nil nil nil 1) (om-load-boxcall 'genfun "CLIMAX-STRENGTH" 'climax-strength '((om-load-inputfun 'input-funbox "list of intervals" "PITCHES" nil) (om-load-inputfun 'input-funbox "ratio" "IDEAL-RATIO" 1.0)) 13107536 nil nil nil nil 1) (om-load-boxcall 'genfun "DIFFERENCES" 'differences '((om-load-inputfun 'input-funbox "list of pitches" "PITCHES" nil) (om-load-inputfun 'input-funbox "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu 'input-funmenu "option" "OPTION" 'octave '(("Normal" 'normal) ("Octave" 'octave) ("Absolute" 'absolute))) (om-load-inputfun 'input-funbox "ideal ratio" "IDEAL-RATIO" 0.0)) 13107711 nil nil nil nil 1) (om-load-boxcall 'bastype "list11" 'list 'nil 10486255 1310830 (list 0 2 4 5 7 9 11) "(0 2 4 5 7 9 11)" nil) (om-load-boxcall 'genfun "PITCH-RANGE" 'pitch-range '((om-load-inputfun 'input-funbox "list of list of notes" "PITCHES" nil) (om-load-inputfun 'input-funbox "maximum pitch range" "MAX-PITCH-RANGE" 12)) 13042098 nil nil nil nil 1) (om-load-boxcall 'bastype "list1" 'list 'nil 10354758 1310785 (list 1/4 1/8) "(1/4 1/8)" nil) (om-load-boxin "input" 0 3145961 "no documentation" nil nil nil) (om-load-boxout "output" 0 20971755 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "SEPARATOR" 'separator '((om-load-inputfun 'input-funbox "cromosomes" "CROMOSOMES" nil)) 6684885 nil nil nil nil 4) (om-load-boxcall 'genfun "SCALE1" 'scale1 '((om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "LISTE-PUNTI" nil) (om-load-inputfun 'input-funbox "no documentation" "FIT-VAL" nil)) 17170672 nil nil nil nil 1)) '((15 0 0 0 nil 0) (15 0 6 0 nil 0) (12 0 6 1 nil 0) (15 0 7 0 nil 0) (5 0 7 2 nil 0) (15 1 8 0 nil 0) (4 0 8 1 nil 0) (15 1 9 0 nil 0) (10 0 9 1 nil 0) (15 1 11 0 nil 0) (3 0 11 1 nil 0) (16 0 14 0 nil 0) (13 0 15 0 nil 0) (6 0 16 0 nil 0) (7 0 16 1 nil 0) (0 0 16 2 nil 0) (8 0 16 3 nil 0) (11 0 16 4 nil 0) (9 0 16 5 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 3735762 nil nil "l" "valutazioni frasi") (om-load-boxcall 'genfun "PHRASE-GENERATOR1" 'phrase-generator '((om-load-inputfun 'input-funbox "how many phrases" "NUM-PHRASES" 50) (om-load-inputfun 'input-funbox "lowest note" "LOW-NOTE" -12) (om-load-inputfun 'input-funbox "highest note" "HIGH-NOTE" 12) (om-load-inputfun 'input-funbox "cent division" "CENT-DEFINITION" 1) (om-load-inputfun 'input-funbox "dur1" "MIN-DURATION" 1/16) (om-load-inputfun 'input-funbox "dur2" "MAX-DURATION" 1/2) (om-load-inputfun 'input-funbox "dur def" "DUR-DEFINITION" 1/16) (om-load-inputfun 'input-funbox "total duration" "TOTAL-DURATION" 2) (om-load-inputfun 'input-funbox "note vs pause" "PERC-NOTE" 0.85)) 4063323 nil nil nil nil 1) (om-load-boxcall 'abstraction "mypatch6" (om-load-patch-abs "mutazioni" '((om-load-boxcall 'genfun "PITCH-MUTATION" 'pitch-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.2) (om-load-inputfunmenu 'input-funmenu "mutation-type" "MUTATION-TYPE" 'normal-add '(("normal" 'normal-add) ("fifth" 'fifth-add)))) 12320965 nil nil nil nil 1) (om-load-boxin "input" 0 2949169 "no documentation" nil nil nil) (om-load-boxout "output" 0 17301708 '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxcall 'genfun "CLASSIC-CROSS" 'classic-cross '((om-load-inputfun 'input-funbox "parents" "CROMOSOMI" nil) (om-load-inputfun 'input-funbox "cross probability" "PERC" 0.65) (om-load-inputfun 'input-funbox "number of cross points" "PUNTI" 2)) 6946886 nil nil nil nil 1) (om-load-boxcall 'genfun "RHYTHMIC-MUTATION" 'rhythmic-mutation '((om-load-inputfun 'input-funbox "list" "CROMOSOMES" (list 0)) (om-load-inputfun 'input-funbox "mutation probability" "PROB" 0.02)) 11468848 nil nil nil nil 1)) '((4 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0)) 4.9 'nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) 3932495 nil nil "l" "mutazioni") (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" 1)) 14024780 nil nil nil nil 1) (om-load-boxcall 'genfun "EVOLUTION1" 'evolution '((om-load-inputfun 'input-funbox "initial population" "CROMOSOMES" nil) (om-load-inputfun 'input-funbox "number of generations" "NUM-OF-GEN" 100) (om-load-inputfun 'input-funbox "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun 'input-funbox "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun 'input-funbox "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun 'input-funbox "perc of unchange elements" "ELITE-PERC" 15) (om-load-inputfunmenu 'input-funmenu "rescaling method" "SCALE" 'sigma '(("Prop" 'prop) ("Sigma" 'sigma))) (om-load-inputfunmenu 'input-funmenu "best of all or last generation" "RESULT" 'all-generations '(("Last generation" 'last-generation) ("All generations" 'all-generations)))) 9699446 nil nil nil "evolution" 2)) '((2 0 0 0 nil 0) (0 0 1 0 nil 0) (6 0 2 0 nil 0) (7 1 6 0 nil 0) (4 0 7 0 nil 0) (3 0 7 2 nil 0) (5 0 7 3 nil 0)) 4.9 'nil) 'nil 7929896 nil (list (list (list (list 1/16 8) (list -3/8) (list -3/8) (list 7/16 0) (list 3/8 -1) (list 3/8 11)) (list (list 1/4 11) (list -7/8) (list 3/16 0) (list 1/4 2) (list 3/8 -1) (list 1/4 -2) (list -3/8)) (list (list 1/4 11) (list -7/8) (list 1/4 -1) (list 7/8 -1) (list 1/8 2) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/16 9) (list -3/8) (list -3/8) (list 7/16 -1) (list 1/4 3) (list 3/8 11)) (list (list 1/4 9) (list -7/8) (list -3/16) (list 1/4 2) (list 3/8 -1) (list 3/8 11)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list -1/8) (list -5/16) (list 1/4 -2) (list 1/8 -10) (list 3/8 -4) (list 1/4 0) (list -3/8)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/4 4) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/16 7) (list -3/8) (list -3/8) (list 7/16 0) (list 3/8 -1) (list 3/8 12)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/4 4) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/16 7) (list -3/8) (list -3/8) (list 7/16 0) (list 3/8 -1) (list 3/8 12)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/8 2) (list 1/4 -1) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list -1/8) (list -5/16) (list 1/4 -2) (list 1/8 -10) (list 3/8 -3) (list 1/4 -1) (list -3/8)) (list (list 1/4 11) (list -7/8) (list 3/16 0) (list 1/4 2) (list 3/8 -1) (list 1/4 -1) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/4 3) (list 1/4 0) (list -3/8)) (list (list 1/4 9) (list -7/8) (list 3/32 0) (list 1/4 2) (list 3/8 -1) (list 1/4 -1) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/4 3) (list 1/4 0) (list -3/8)) (list (list 1/4 9) (list -7/8) (list 3/32 0) (list 1/4 2) (list 3/8 -1) (list 1/4 -1) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/4 3) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 0) (list 7/16 -1) (list 1/8 2) (list 1/4 -1) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 -1) (list -5/16) (list 1/4 -1) (list 7/16 -1) (list 1/4 3) (list 1/4 0) (list -3/8)) (list (list 1/4 11) (list -7/8) (list 1/4 -1) (list 7/8 -1) (list 1/8 2) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)) (list (list 1/8 11) (list -7/8) (list 1/4 -1) (list 1/4 2) (list 3/8 -1) (list 1/4 0) (list -3/8)))) "x" "prima generazione")) '((1 0 0 1 nil 0) (5 0 1 0 nil 0) (3 0 1 1 nil 0) (6 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (9 1 6 0 nil 0) (10 0 9 0 nil 0) (8 0 9 2 nil 0) (7 0 9 3 nil 0)) 'nil 4.9 '(nil nil nil nil nil nil nil nil nil nil nil)))
