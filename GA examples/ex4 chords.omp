; OM File Header - Saved 2024/02/05 11:58:26
; (7.01 :patc (om-make-point 479 111) (om-make-point 12 25) (om-make-point 884 499) "" 183 0 "2024/01/31 09:44:45" "2024/02/05 11:58:26")
; End File Header
(in-package :om)(load-lib-for (quote ("GA")))(setf *om-current-persistent* (om-load-patch1 "ex4 chords" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 98 391) (om-make-point 298 126) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700 5200 6200 5700 5600 5800 6100 7100) (6300 6100 7100 5700 5200 6700) (6200 5200 5700 6700 6100 7100) (6200 5700 5200 6700))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list 0 (quote :normal) nil 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 93/50 nil 1000 0 (om-make-point 685 413) (om-make-point 10 40) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 520 251) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 366 216) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP1" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a function" "TEST" (quote equal)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 457 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a function" "TEST" (quote equal)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 2))) (om-make-point 310 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 111 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEPARATOR" (quote separator) (quote ((om-load-inputfun (quote input-funbox) "cromosomes" "CROMOSOMES" nil))) (om-make-point 77 111) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVOLUTION1" (quote evolution) (quote ((om-load-inputfun (quote input-funbox) "initial population" "CROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "number of generations" "NUM-OF-GEN" 200) (om-load-inputfun (quote input-funbox) "fitness function" "FITNESS-FUNC" nil) (om-load-inputfun (quote input-funbox) "mutation function" "MUTATION-FUNC" nil) (om-load-inputfun (quote input-funbox) "number of best elements" "N-BEST-ELEMENTS" 1) (om-load-inputfun (quote input-funbox) "perc of unchange elements" "ELITE-PERC" 10) (om-load-inputfunmenu1 (quote input-funmenu) "rescaling method" "SCALE" (quote prop) (list (list "Prop" (quote (quote prop))) (list "Sigma" (quote (quote sigma))))) (om-load-inputfunmenu1 (quote input-funmenu) "best of all or last generation" "RESULT" (quote all-generations) (list (list "Last generation" (quote (quote last-generation))) (list "All generations" (quote (quote all-generations))))))) (om-make-point 19 231) nil (list (list (list 0.57142854) (list 0.57142854) (list 0.71428574) (list 0.71428574) (list 0.71428574) (list 0.71428574) (list 0.85714287) (list 0.85714287) (list 0.85714287) (list 0.85714287) (list 1.0)) (list (list (list 7 -8 2 -3 -4 -2 1 11)) (list (list 7 -8 2 -3 -4 -2 1 11)) (list (list 3 1 11 -8 -3 7 -8 7)) (list (list 3 1 11 -8 -3 7 -8 7)) (list (list 3 1 11 -8 -3 7 -8 7)) (list (list 3 1 11 -8 -3 7 -8 7)) (list (list 7 -8 2 -8 -3 7 1 11)) (list (list 7 -8 2 -8 -3 7 1 11)) (list (list 7 -8 2 -8 -3 7 1 11)) (list (list 7 -8 2 -8 -3 7 1 11)) (list (list 7 -8 2 -8 -3 7 -8 7)))) "x" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mutation" (om-load-patch-abs1 "mutation" (quote ((let ((box (om-load-boxcall (quote genfun) "CROSSOVER" (quote crossover) (quote ((om-load-inputfun (quote input-funbox) "parents" "CHROMOSOMES" nil) (om-load-inputfun (quote input-funbox) "cross probability" "PERC" 0.65) (om-load-inputfun (quote input-funbox) "number of cross points" "CROSS-POINT" 2))) (om-make-point 49 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCH-MUTATION" (quote pitch-mutation) (quote ((om-load-inputfun (quote input-funbox) "list" "CROMOSOMES" (list 0)) (om-load-inputfun (quote input-funbox) "mutation probability" "PROB" 0.002) (om-load-inputfunmenu1 (quote input-funmenu) "mutation-type" "MUTATION-TYPE" (quote normal-add) (list (list "normal" (quote (quote normal-add))) (list "fifth" (quote (quote fifth-add))))))) (om-make-point 76 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 45) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 74 314) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 252 107) nil (list nil) "l" "mutation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "fitness-func" (om-load-patch-abs1 "fitness-func" (quote ((let ((box (om-load-boxcall (quote genfun) "SCALE1 2" (quote scale1) (quote ((om-load-inputfun (quote input-funbox) "fitness-values" "FIT-VAL" nil))) (om-make-point 157 390) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 45 104) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 108 202) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 112 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 49 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 209 291) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 64 291) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "convintervalli" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 163 238) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 103 178) (om-make-point 91 30) (list 5 10 15 20) "(5 10 15 20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIFFERENCES" (quote differences) (quote ((om-load-inputfun (quote input-funbox) "list of pitches" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "permitted distance from root" "ALLOWED-ELEMENTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "option" "OPTION" (quote absolute) (list (list "Normal" (quote (quote normal))) (list "Octave" (quote (quote octave))) (list "Absolute" (quote (quote absolute))))) (om-load-inputfun (quote input-funbox) "ideal ratio" "IDEAL-RATIO" 1.0))) (om-make-point 57 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 153 22) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 274 391) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (5 0 1 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 4 3 nil 0) (0 0 6 0 nil 0))) 7.01 nil "" (om-make-point 325 39) (om-make-point 752 604)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 179 106) nil (list nil) "l" "fitness-func"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "conversion" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 193 254) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 137 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 102 141) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 84 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 125 273) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 219 59) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 44 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 156 339) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 64 343) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (4 0 0 1 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (6 0 5 0 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "conversion" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHRASE-GENERATOR" (quote phrase-generator) (quote ((om-load-inputfun (quote input-funbox) "how many phrases" "NUM-PHRASES" 200) (om-load-inputfun (quote input-funbox) "lowest note" "LOW-NOTE" -15) (om-load-inputfun (quote input-funbox) "highest note" "HIGH-NOTE" 15) (om-load-inputfun (quote input-funbox) "cent division" "CENT-DEFINITION" 1) (om-load-inputfun (quote input-funbox) "dur1" "MIN-DURATION" 1/8) (om-load-inputfun (quote input-funbox) "dur2" "MAX-DURATION" 1/8) (om-load-inputfun (quote input-funbox) "dur def" "DUR-DEFINITION" 1/8) (om-load-inputfun (quote input-funbox) "total duration" "TOTAL-DURATION" 1) (om-load-inputfun (quote input-funbox) "note vs pause" "PERC-NOTE" 1.0))) (om-make-point 85 30) (om-make-point 101 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 278 211) (om-make-point 29 20) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 1 nil 0) (4 0 3 0 nil 0) (1 0 3 2 nil 0) (10 0 4 0 nil 0) (2 0 4 2 nil 0) (7 1 5 0 nil 0) (11 0 6 0 nil 0) (6 1 7 0 nil 0) (9 0 7 2 nil 0) (8 0 7 3 nil 0) (5 0 10 0 nil 0) (12 0 10 1 nil 0))) nil 7.01))
